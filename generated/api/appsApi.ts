/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { AppBetaTestersLinkagesRequest } from "../model/appBetaTestersLinkagesRequest";
import { AppClipsResponse } from "../model/appClipsResponse";
import { AppCustomProductPagesResponse } from "../model/appCustomProductPagesResponse";
import { AppEventsResponse } from "../model/appEventsResponse";
import { AppInfosResponse } from "../model/appInfosResponse";
import { AppPreOrderResponse } from "../model/appPreOrderResponse";
import { AppPricePointsV2Response } from "../model/appPricePointsV2Response";
import { AppPricesResponse } from "../model/appPricesResponse";
import { AppResponse } from "../model/appResponse";
import { AppStoreVersionsResponse } from "../model/appStoreVersionsResponse";
import { AppUpdateRequest } from "../model/appUpdateRequest";
import { AppsResponse } from "../model/appsResponse";
import { BetaAppLocalizationsResponse } from "../model/betaAppLocalizationsResponse";
import { BetaAppReviewDetailResponse } from "../model/betaAppReviewDetailResponse";
import { BetaGroupsResponse } from "../model/betaGroupsResponse";
import { BetaLicenseAgreementResponse } from "../model/betaLicenseAgreementResponse";
import { BuildsResponse } from "../model/buildsResponse";
import { CiProductResponse } from "../model/ciProductResponse";
import { EndUserLicenseAgreementResponse } from "../model/endUserLicenseAgreementResponse";
import { ErrorResponse } from "../model/errorResponse";
import { GameCenterEnabledVersionsResponse } from "../model/gameCenterEnabledVersionsResponse";
import { InAppPurchasesResponse } from "../model/inAppPurchasesResponse";
import { PreReleaseVersionsResponse } from "../model/preReleaseVersionsResponse";
import { ReviewSubmissionsResponse } from "../model/reviewSubmissionsResponse";
import { TerritoriesResponse } from "../model/territoriesResponse";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.appstoreconnect.apple.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AppsApiApiKeys {}

export class AppsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    "itc-bearer-token": new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: AppsApiApiKeys, value: string) {
    (this.authentications as any)[AppsApiApiKeys[key]].apiKey = value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications["itc-bearer-token"].accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @param id the id of the requested resource
   * @param filterBundleId filter by attribute \&#39;bundleId\&#39;
   * @param fieldsAppClips the fields to include for returned resources of type appClips
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsAppClipDefaultExperiences the fields to include for returned resources of type appClipDefaultExperiences
   * @param limit maximum resources per page
   * @param limitAppClipDefaultExperiences maximum number of related appClipDefaultExperiences returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsAppClipsGetToManyRelated(
    id: string,
    filterBundleId?: Array<string>,
    fieldsAppClips?: Array<
      | "app"
      | "appClipAdvancedExperiences"
      | "appClipDefaultExperiences"
      | "bundleId"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsAppClipDefaultExperiences?: Array<
      | "action"
      | "appClip"
      | "appClipAppStoreReviewDetail"
      | "appClipDefaultExperienceLocalizations"
      | "appClipDefaultExperienceTemplate"
      | "releaseWithAppStoreVersion"
    >,
    limit?: number,
    limitAppClipDefaultExperiences?: number,
    include?: Array<"app" | "appClipDefaultExperiences">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppClipsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/appClips".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsAppClipsGetToManyRelated."
      );
    }

    if (filterBundleId !== undefined) {
      localVarQueryParameters["filter[bundleId]"] = ObjectSerializer.serialize(
        filterBundleId,
        "Array<string>"
      );
    }

    if (fieldsAppClips !== undefined) {
      localVarQueryParameters["fields[appClips]"] = ObjectSerializer.serialize(
        fieldsAppClips,
        "Array<'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId'>"
      );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsAppClipDefaultExperiences !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperiences]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperiences,
          "Array<'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitAppClipDefaultExperiences !== undefined) {
      localVarQueryParameters["limit[appClipDefaultExperiences]"] =
        ObjectSerializer.serialize(limitAppClipDefaultExperiences, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'appClipDefaultExperiences'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppClipsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "AppClipsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterVisible filter by attribute \&#39;visible\&#39;
   * @param fieldsAppCustomProductPages the fields to include for returned resources of type appCustomProductPages
   * @param fieldsAppCustomProductPageVersions the fields to include for returned resources of type appCustomProductPageVersions
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param limit maximum resources per page
   * @param limitAppCustomProductPageVersions maximum number of related appCustomProductPageVersions returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsAppCustomProductPagesGetToManyRelated(
    id: string,
    filterVisible?: Array<string>,
    fieldsAppCustomProductPages?: Array<
      | "app"
      | "appCustomProductPageVersions"
      | "appStoreVersionTemplate"
      | "customProductPageTemplate"
      | "name"
      | "url"
      | "visible"
    >,
    fieldsAppCustomProductPageVersions?: Array<
      | "appCustomProductPage"
      | "appCustomProductPageLocalizations"
      | "state"
      | "version"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    limit?: number,
    limitAppCustomProductPageVersions?: number,
    include?: Array<"app" | "appCustomProductPageVersions">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppCustomProductPagesResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/appCustomProductPages".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsAppCustomProductPagesGetToManyRelated."
      );
    }

    if (filterVisible !== undefined) {
      localVarQueryParameters["filter[visible]"] = ObjectSerializer.serialize(
        filterVisible,
        "Array<string>"
      );
    }

    if (fieldsAppCustomProductPages !== undefined) {
      localVarQueryParameters["fields[appCustomProductPages]"] =
        ObjectSerializer.serialize(
          fieldsAppCustomProductPages,
          "Array<'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible'>"
        );
    }

    if (fieldsAppCustomProductPageVersions !== undefined) {
      localVarQueryParameters["fields[appCustomProductPageVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppCustomProductPageVersions,
          "Array<'appCustomProductPage' | 'appCustomProductPageLocalizations' | 'state' | 'version'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitAppCustomProductPageVersions !== undefined) {
      localVarQueryParameters["limit[appCustomProductPageVersions]"] =
        ObjectSerializer.serialize(limitAppCustomProductPageVersions, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'appCustomProductPageVersions'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppCustomProductPagesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppCustomProductPagesResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterEventState filter by attribute \&#39;eventState\&#39;
   * @param filterId filter by id(s)
   * @param fieldsAppEventLocalizations the fields to include for returned resources of type appEventLocalizations
   * @param fieldsAppEvents the fields to include for returned resources of type appEvents
   * @param limit maximum resources per page
   * @param limitLocalizations maximum number of related localizations returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsAppEventsGetToManyRelated(
    id: string,
    filterEventState?: Array<
      | "DRAFT"
      | "READY_FOR_REVIEW"
      | "WAITING_FOR_REVIEW"
      | "IN_REVIEW"
      | "REJECTED"
      | "ACCEPTED"
      | "APPROVED"
      | "PUBLISHED"
      | "PAST"
      | "ARCHIVED"
    >,
    filterId?: Array<string>,
    fieldsAppEventLocalizations?: Array<
      | "appEvent"
      | "appEventScreenshots"
      | "appEventVideoClips"
      | "locale"
      | "longDescription"
      | "name"
      | "shortDescription"
    >,
    fieldsAppEvents?: Array<
      | "app"
      | "archivedTerritorySchedules"
      | "badge"
      | "deepLink"
      | "eventState"
      | "localizations"
      | "primaryLocale"
      | "priority"
      | "purchaseRequirement"
      | "purpose"
      | "referenceName"
      | "territorySchedules"
    >,
    limit?: number,
    limitLocalizations?: number,
    include?: Array<"localizations">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppEventsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/appEvents".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsAppEventsGetToManyRelated."
      );
    }

    if (filterEventState !== undefined) {
      localVarQueryParameters["filter[eventState]"] =
        ObjectSerializer.serialize(
          filterEventState,
          "Array<'DRAFT' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'ACCEPTED' | 'APPROVED' | 'PUBLISHED' | 'PAST' | 'ARCHIVED'>"
        );
    }

    if (filterId !== undefined) {
      localVarQueryParameters["filter[id]"] = ObjectSerializer.serialize(
        filterId,
        "Array<string>"
      );
    }

    if (fieldsAppEventLocalizations !== undefined) {
      localVarQueryParameters["fields[appEventLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsAppEventLocalizations,
          "Array<'appEvent' | 'appEventScreenshots' | 'appEventVideoClips' | 'locale' | 'longDescription' | 'name' | 'shortDescription'>"
        );
    }

    if (fieldsAppEvents !== undefined) {
      localVarQueryParameters["fields[appEvents]"] = ObjectSerializer.serialize(
        fieldsAppEvents,
        "Array<'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitLocalizations !== undefined) {
      localVarQueryParameters["limit[localizations]"] =
        ObjectSerializer.serialize(limitLocalizations, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'localizations'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppEventsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "AppEventsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations
   * @param fieldsAppInfos the fields to include for returned resources of type appInfos
   * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations
   * @param fieldsAppCategories the fields to include for returned resources of type appCategories
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param limit maximum resources per page
   * @param limitAppInfoLocalizations maximum number of related appInfoLocalizations returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsAppInfosGetToManyRelated(
    id: string,
    fieldsAgeRatingDeclarations?: Array<
      | "alcoholTobaccoOrDrugUseOrReferences"
      | "contests"
      | "gambling"
      | "gamblingAndContests"
      | "gamblingSimulated"
      | "horrorOrFearThemes"
      | "kidsAgeBand"
      | "matureOrSuggestiveThemes"
      | "medicalOrTreatmentInformation"
      | "profanityOrCrudeHumor"
      | "seventeenPlus"
      | "sexualContentGraphicAndNudity"
      | "sexualContentOrNudity"
      | "unrestrictedWebAccess"
      | "violenceCartoonOrFantasy"
      | "violenceRealistic"
      | "violenceRealisticProlongedGraphicOrSadistic"
    >,
    fieldsAppInfos?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appInfoLocalizations"
      | "appStoreAgeRating"
      | "appStoreState"
      | "brazilAgeRating"
      | "kidsAgeBand"
      | "primaryCategory"
      | "primarySubcategoryOne"
      | "primarySubcategoryTwo"
      | "secondaryCategory"
      | "secondarySubcategoryOne"
      | "secondarySubcategoryTwo"
    >,
    fieldsAppInfoLocalizations?: Array<
      | "appInfo"
      | "locale"
      | "name"
      | "privacyChoicesUrl"
      | "privacyPolicyText"
      | "privacyPolicyUrl"
      | "subtitle"
    >,
    fieldsAppCategories?: Array<"parent" | "platforms" | "subcategories">,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    limit?: number,
    limitAppInfoLocalizations?: number,
    include?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appInfoLocalizations"
      | "primaryCategory"
      | "primarySubcategoryOne"
      | "primarySubcategoryTwo"
      | "secondaryCategory"
      | "secondarySubcategoryOne"
      | "secondarySubcategoryTwo"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppInfosResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/appInfos".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsAppInfosGetToManyRelated."
      );
    }

    if (fieldsAgeRatingDeclarations !== undefined) {
      localVarQueryParameters["fields[ageRatingDeclarations]"] =
        ObjectSerializer.serialize(
          fieldsAgeRatingDeclarations,
          "Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gambling' | 'gamblingAndContests' | 'gamblingSimulated' | 'horrorOrFearThemes' | 'kidsAgeBand' | 'matureOrSuggestiveThemes' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'seventeenPlus' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealistic' | 'violenceRealisticProlongedGraphicOrSadistic'>"
        );
    }

    if (fieldsAppInfos !== undefined) {
      localVarQueryParameters["fields[appInfos]"] = ObjectSerializer.serialize(
        fieldsAppInfos,
        "Array<'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>"
      );
    }

    if (fieldsAppInfoLocalizations !== undefined) {
      localVarQueryParameters["fields[appInfoLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsAppInfoLocalizations,
          "Array<'appInfo' | 'locale' | 'name' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'privacyPolicyUrl' | 'subtitle'>"
        );
    }

    if (fieldsAppCategories !== undefined) {
      localVarQueryParameters["fields[appCategories]"] =
        ObjectSerializer.serialize(
          fieldsAppCategories,
          "Array<'parent' | 'platforms' | 'subcategories'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitAppInfoLocalizations !== undefined) {
      localVarQueryParameters["limit[appInfoLocalizations]"] =
        ObjectSerializer.serialize(limitAppInfoLocalizations, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppInfosResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "AppInfosResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterAppStoreState filter by attribute \&#39;appStoreState\&#39;
   * @param filterPlatform filter by attribute \&#39;platform\&#39;
   * @param filterVersionString filter by attribute \&#39;versionString\&#39;
   * @param filterId filter by id(s)
   * @param fieldsAppStoreVersionExperiments the fields to include for returned resources of type appStoreVersionExperiments
   * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations
   * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions
   * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages
   * @param fieldsAppClipDefaultExperiences the fields to include for returned resources of type appClipDefaultExperiences
   * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations
   * @param limit maximum resources per page
   * @param limitAppStoreVersionLocalizations maximum number of related appStoreVersionLocalizations returned (when they are included)
   * @param limitAppStoreVersionExperiments maximum number of related appStoreVersionExperiments returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsAppStoreVersionsGetToManyRelated(
    id: string,
    filterAppStoreState?: Array<
      | "ACCEPTED"
      | "DEVELOPER_REMOVED_FROM_SALE"
      | "DEVELOPER_REJECTED"
      | "IN_REVIEW"
      | "INVALID_BINARY"
      | "METADATA_REJECTED"
      | "PENDING_APPLE_RELEASE"
      | "PENDING_CONTRACT"
      | "PENDING_DEVELOPER_RELEASE"
      | "PREPARE_FOR_SUBMISSION"
      | "PREORDER_READY_FOR_SALE"
      | "PROCESSING_FOR_APP_STORE"
      | "READY_FOR_REVIEW"
      | "READY_FOR_SALE"
      | "REJECTED"
      | "REMOVED_FROM_SALE"
      | "WAITING_FOR_EXPORT_COMPLIANCE"
      | "WAITING_FOR_REVIEW"
      | "REPLACED_WITH_NEW_VERSION"
    >,
    filterPlatform?: Array<"IOS" | "MAC_OS" | "TV_OS">,
    filterVersionString?: Array<string>,
    filterId?: Array<string>,
    fieldsAppStoreVersionExperiments?: Array<
      | "appStoreVersion"
      | "appStoreVersionExperimentTreatments"
      | "endDate"
      | "name"
      | "reviewRequired"
      | "startDate"
      | "started"
      | "state"
      | "trafficProportion"
    >,
    fieldsAgeRatingDeclarations?: Array<
      | "alcoholTobaccoOrDrugUseOrReferences"
      | "contests"
      | "gambling"
      | "gamblingAndContests"
      | "gamblingSimulated"
      | "horrorOrFearThemes"
      | "kidsAgeBand"
      | "matureOrSuggestiveThemes"
      | "medicalOrTreatmentInformation"
      | "profanityOrCrudeHumor"
      | "seventeenPlus"
      | "sexualContentGraphicAndNudity"
      | "sexualContentOrNudity"
      | "unrestrictedWebAccess"
      | "violenceCartoonOrFantasy"
      | "violenceRealistic"
      | "violenceRealisticProlongedGraphicOrSadistic"
    >,
    fieldsAppStoreVersionSubmissions?: Array<"appStoreVersion">,
    fieldsAppStoreReviewDetails?: Array<
      | "appStoreReviewAttachments"
      | "appStoreVersion"
      | "contactEmail"
      | "contactFirstName"
      | "contactLastName"
      | "contactPhone"
      | "demoAccountName"
      | "demoAccountPassword"
      | "demoAccountRequired"
      | "notes"
    >,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsIdfaDeclarations?: Array<
      | "appStoreVersion"
      | "attributesActionWithPreviousAd"
      | "attributesAppInstallationToPreviousAd"
      | "honorsLimitedAdTracking"
      | "servesAds"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsRoutingAppCoverages?: Array<
      | "appStoreVersion"
      | "assetDeliveryState"
      | "fileName"
      | "fileSize"
      | "sourceFileChecksum"
      | "uploadOperations"
      | "uploaded"
    >,
    fieldsAppClipDefaultExperiences?: Array<
      | "action"
      | "appClip"
      | "appClipAppStoreReviewDetail"
      | "appClipDefaultExperienceLocalizations"
      | "appClipDefaultExperienceTemplate"
      | "releaseWithAppStoreVersion"
    >,
    fieldsAppStoreVersionPhasedReleases?: Array<
      | "appStoreVersion"
      | "currentDayNumber"
      | "phasedReleaseState"
      | "startDate"
      | "totalPauseDuration"
    >,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    fieldsAppStoreVersionLocalizations?: Array<
      | "appPreviewSets"
      | "appScreenshotSets"
      | "appStoreVersion"
      | "description"
      | "keywords"
      | "locale"
      | "marketingUrl"
      | "promotionalText"
      | "supportUrl"
      | "whatsNew"
    >,
    limit?: number,
    limitAppStoreVersionLocalizations?: number,
    limitAppStoreVersionExperiments?: number,
    include?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "idfaDeclaration"
      | "routingAppCoverage"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppStoreVersionsResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/appStoreVersions".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsAppStoreVersionsGetToManyRelated."
      );
    }

    if (filterAppStoreState !== undefined) {
      localVarQueryParameters["filter[appStoreState]"] =
        ObjectSerializer.serialize(
          filterAppStoreState,
          "Array<'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION'>"
        );
    }

    if (filterPlatform !== undefined) {
      localVarQueryParameters["filter[platform]"] = ObjectSerializer.serialize(
        filterPlatform,
        "Array<'IOS' | 'MAC_OS' | 'TV_OS'>"
      );
    }

    if (filterVersionString !== undefined) {
      localVarQueryParameters["filter[versionString]"] =
        ObjectSerializer.serialize(filterVersionString, "Array<string>");
    }

    if (filterId !== undefined) {
      localVarQueryParameters["filter[id]"] = ObjectSerializer.serialize(
        filterId,
        "Array<string>"
      );
    }

    if (fieldsAppStoreVersionExperiments !== undefined) {
      localVarQueryParameters["fields[appStoreVersionExperiments]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionExperiments,
          "Array<'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'endDate' | 'name' | 'reviewRequired' | 'startDate' | 'started' | 'state' | 'trafficProportion'>"
        );
    }

    if (fieldsAgeRatingDeclarations !== undefined) {
      localVarQueryParameters["fields[ageRatingDeclarations]"] =
        ObjectSerializer.serialize(
          fieldsAgeRatingDeclarations,
          "Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gambling' | 'gamblingAndContests' | 'gamblingSimulated' | 'horrorOrFearThemes' | 'kidsAgeBand' | 'matureOrSuggestiveThemes' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'seventeenPlus' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealistic' | 'violenceRealisticProlongedGraphicOrSadistic'>"
        );
    }

    if (fieldsAppStoreVersionSubmissions !== undefined) {
      localVarQueryParameters["fields[appStoreVersionSubmissions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionSubmissions,
          "Array<'appStoreVersion'>"
        );
    }

    if (fieldsAppStoreReviewDetails !== undefined) {
      localVarQueryParameters["fields[appStoreReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreReviewDetails,
          "Array<'appStoreReviewAttachments' | 'appStoreVersion' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsIdfaDeclarations !== undefined) {
      localVarQueryParameters["fields[idfaDeclarations]"] =
        ObjectSerializer.serialize(
          fieldsIdfaDeclarations,
          "Array<'appStoreVersion' | 'attributesActionWithPreviousAd' | 'attributesAppInstallationToPreviousAd' | 'honorsLimitedAdTracking' | 'servesAds'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsRoutingAppCoverages !== undefined) {
      localVarQueryParameters["fields[routingAppCoverages]"] =
        ObjectSerializer.serialize(
          fieldsRoutingAppCoverages,
          "Array<'appStoreVersion' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded'>"
        );
    }

    if (fieldsAppClipDefaultExperiences !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperiences]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperiences,
          "Array<'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion'>"
        );
    }

    if (fieldsAppStoreVersionPhasedReleases !== undefined) {
      localVarQueryParameters["fields[appStoreVersionPhasedReleases]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionPhasedReleases,
          "Array<'appStoreVersion' | 'currentDayNumber' | 'phasedReleaseState' | 'startDate' | 'totalPauseDuration'>"
        );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (fieldsAppStoreVersionLocalizations !== undefined) {
      localVarQueryParameters["fields[appStoreVersionLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionLocalizations,
          "Array<'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersion' | 'description' | 'keywords' | 'locale' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitAppStoreVersionLocalizations !== undefined) {
      localVarQueryParameters["limit[appStoreVersionLocalizations]"] =
        ObjectSerializer.serialize(limitAppStoreVersionLocalizations, "number");
    }

    if (limitAppStoreVersionExperiments !== undefined) {
      localVarQueryParameters["limit[appStoreVersionExperiments]"] =
        ObjectSerializer.serialize(limitAppStoreVersionExperiments, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'idfaDeclaration' | 'routingAppCoverage'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppStoreVersionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppStoreVersionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsTerritories the fields to include for returned resources of type territories
   * @param limit maximum resources per page
   */
  public async appsAvailableTerritoriesGetToManyRelated(
    id: string,
    fieldsTerritories?: Array<"currency">,
    limit?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: TerritoriesResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/availableTerritories".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsAvailableTerritoriesGetToManyRelated."
      );
    }

    if (fieldsTerritories !== undefined) {
      localVarQueryParameters["fields[territories]"] =
        ObjectSerializer.serialize(fieldsTerritories, "Array<'currency'>");
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: TerritoriesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "TerritoriesResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations
   * @param limit maximum resources per page
   */
  public async appsBetaAppLocalizationsGetToManyRelated(
    id: string,
    fieldsBetaAppLocalizations?: Array<
      | "app"
      | "description"
      | "feedbackEmail"
      | "locale"
      | "marketingUrl"
      | "privacyPolicyUrl"
      | "tvOsPrivacyPolicy"
    >,
    limit?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: BetaAppLocalizationsResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/betaAppLocalizations".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsBetaAppLocalizationsGetToManyRelated."
      );
    }

    if (fieldsBetaAppLocalizations !== undefined) {
      localVarQueryParameters["fields[betaAppLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppLocalizations,
          "Array<'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: BetaAppLocalizationsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "BetaAppLocalizationsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails
   */
  public async appsBetaAppReviewDetailGetToOneRelated(
    id: string,
    fieldsBetaAppReviewDetails?: Array<
      | "app"
      | "contactEmail"
      | "contactFirstName"
      | "contactLastName"
      | "contactPhone"
      | "demoAccountName"
      | "demoAccountPassword"
      | "demoAccountRequired"
      | "notes"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: BetaAppReviewDetailResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/betaAppReviewDetail".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsBetaAppReviewDetailGetToOneRelated."
      );
    }

    if (fieldsBetaAppReviewDetails !== undefined) {
      localVarQueryParameters["fields[betaAppReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppReviewDetails,
          "Array<'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes'>"
        );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: BetaAppReviewDetailResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "BetaAppReviewDetailResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups
   * @param limit maximum resources per page
   */
  public async appsBetaGroupsGetToManyRelated(
    id: string,
    fieldsBetaGroups?: Array<
      | "app"
      | "betaTesters"
      | "builds"
      | "createdDate"
      | "feedbackEnabled"
      | "hasAccessToAllBuilds"
      | "iosBuildsAvailableForAppleSiliconMac"
      | "isInternalGroup"
      | "name"
      | "publicLink"
      | "publicLinkEnabled"
      | "publicLinkId"
      | "publicLinkLimit"
      | "publicLinkLimitEnabled"
    >,
    limit?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: BetaGroupsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/betaGroups".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsBetaGroupsGetToManyRelated."
      );
    }

    if (fieldsBetaGroups !== undefined) {
      localVarQueryParameters["fields[betaGroups]"] =
        ObjectSerializer.serialize(
          fieldsBetaGroups,
          "Array<'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: BetaGroupsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "BetaGroupsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements
   */
  public async appsBetaLicenseAgreementGetToOneRelated(
    id: string,
    fieldsBetaLicenseAgreements?: Array<"agreementText" | "app">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: BetaLicenseAgreementResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/betaLicenseAgreement".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsBetaLicenseAgreementGetToOneRelated."
      );
    }

    if (fieldsBetaLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[betaLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsBetaLicenseAgreements,
          "Array<'agreementText' | 'app'>"
        );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: BetaLicenseAgreementResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "BetaLicenseAgreementResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param appBetaTestersLinkagesRequest List of related linkages
   */
  public async appsBetaTestersDeleteToManyRelationship(
    id: string,
    appBetaTestersLinkagesRequest: AppBetaTestersLinkagesRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/relationships/betaTesters".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsBetaTestersDeleteToManyRelationship."
      );
    }

    // verify required parameter 'appBetaTestersLinkagesRequest' is not null or undefined
    if (
      appBetaTestersLinkagesRequest === null ||
      appBetaTestersLinkagesRequest === undefined
    ) {
      throw new Error(
        "Required parameter appBetaTestersLinkagesRequest was null or undefined when calling appsBetaTestersDeleteToManyRelationship."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        appBetaTestersLinkagesRequest,
        "AppBetaTestersLinkagesRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limit maximum resources per page
   */
  public async appsBuildsGetToManyRelated(
    id: string,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limit?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: BuildsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/builds".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsBuildsGetToManyRelated."
      );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: BuildsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "BuildsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsScmRepositories the fields to include for returned resources of type scmRepositories
   * @param fieldsBundleIds the fields to include for returned resources of type bundleIds
   * @param limitPrimaryRepositories maximum number of related primaryRepositories returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsCiProductGetToOneRelated(
    id: string,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsScmRepositories?: Array<
      | "defaultBranch"
      | "gitReferences"
      | "httpCloneUrl"
      | "lastAccessedDate"
      | "ownerName"
      | "pullRequests"
      | "repositoryName"
      | "scmProvider"
      | "sshCloneUrl"
    >,
    fieldsBundleIds?: Array<
      | "app"
      | "bundleIdCapabilities"
      | "identifier"
      | "name"
      | "platform"
      | "profiles"
      | "seedId"
    >,
    limitPrimaryRepositories?: number,
    include?: Array<"app" | "bundleId" | "primaryRepositories">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiProductResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/ciProduct".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsCiProductGetToOneRelated."
      );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsScmRepositories !== undefined) {
      localVarQueryParameters["fields[scmRepositories]"] =
        ObjectSerializer.serialize(
          fieldsScmRepositories,
          "Array<'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl'>"
        );
    }

    if (fieldsBundleIds !== undefined) {
      localVarQueryParameters["fields[bundleIds]"] = ObjectSerializer.serialize(
        fieldsBundleIds,
        "Array<'app' | 'bundleIdCapabilities' | 'identifier' | 'name' | 'platform' | 'profiles' | 'seedId'>"
      );
    }

    if (limitPrimaryRepositories !== undefined) {
      localVarQueryParameters["limit[primaryRepositories]"] =
        ObjectSerializer.serialize(limitPrimaryRepositories, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'bundleId' | 'primaryRepositories'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiProductResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CiProductResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements
   */
  public async appsEndUserLicenseAgreementGetToOneRelated(
    id: string,
    fieldsEndUserLicenseAgreements?: Array<
      "agreementText" | "app" | "territories"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: EndUserLicenseAgreementResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/endUserLicenseAgreement".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsEndUserLicenseAgreementGetToOneRelated."
      );
    }

    if (fieldsEndUserLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[endUserLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsEndUserLicenseAgreements,
          "Array<'agreementText' | 'app' | 'territories'>"
        );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: EndUserLicenseAgreementResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "EndUserLicenseAgreementResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterPlatform filter by attribute \&#39;platform\&#39;
   * @param filterVersionString filter by attribute \&#39;versionString\&#39;
   * @param filterId filter by id(s)
   * @param sort comma-separated list of sort expressions; resources will be sorted as specified
   * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param limit maximum resources per page
   * @param limitCompatibleVersions maximum number of related compatibleVersions returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsGameCenterEnabledVersionsGetToManyRelated(
    id: string,
    filterPlatform?: Array<"IOS" | "MAC_OS" | "TV_OS">,
    filterVersionString?: Array<string>,
    filterId?: Array<string>,
    sort?: Array<"versionString" | "-versionString">,
    fieldsGameCenterEnabledVersions?: Array<
      "app" | "compatibleVersions" | "iconAsset" | "platform" | "versionString"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    limit?: number,
    limitCompatibleVersions?: number,
    include?: Array<"app" | "compatibleVersions">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: GameCenterEnabledVersionsResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/gameCenterEnabledVersions".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsGameCenterEnabledVersionsGetToManyRelated."
      );
    }

    if (filterPlatform !== undefined) {
      localVarQueryParameters["filter[platform]"] = ObjectSerializer.serialize(
        filterPlatform,
        "Array<'IOS' | 'MAC_OS' | 'TV_OS'>"
      );
    }

    if (filterVersionString !== undefined) {
      localVarQueryParameters["filter[versionString]"] =
        ObjectSerializer.serialize(filterVersionString, "Array<string>");
    }

    if (filterId !== undefined) {
      localVarQueryParameters["filter[id]"] = ObjectSerializer.serialize(
        filterId,
        "Array<string>"
      );
    }

    if (sort !== undefined) {
      localVarQueryParameters["sort"] = ObjectSerializer.serialize(
        sort,
        "Array<'versionString' | '-versionString'>"
      );
    }

    if (fieldsGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["fields[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(
          fieldsGameCenterEnabledVersions,
          "Array<'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitCompatibleVersions !== undefined) {
      localVarQueryParameters["limit[compatibleVersions]"] =
        ObjectSerializer.serialize(limitCompatibleVersions, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'compatibleVersions'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: GameCenterEnabledVersionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "GameCenterEnabledVersionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param filterAppStoreVersionsAppStoreState filter by attribute \&#39;appStoreVersions.appStoreState\&#39;
   * @param filterAppStoreVersionsPlatform filter by attribute \&#39;appStoreVersions.platform\&#39;
   * @param filterBundleId filter by attribute \&#39;bundleId\&#39;
   * @param filterName filter by attribute \&#39;name\&#39;
   * @param filterSku filter by attribute \&#39;sku\&#39;
   * @param filterAppStoreVersions filter by id(s) of related \&#39;appStoreVersions\&#39;
   * @param filterId filter by id(s)
   * @param existsGameCenterEnabledVersions filter by existence or non-existence of related \&#39;gameCenterEnabledVersions\&#39;
   * @param sort comma-separated list of sort expressions; resources will be sorted as specified
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements
   * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails
   * @param fieldsAppClips the fields to include for returned resources of type appClips
   * @param fieldsAppInfos the fields to include for returned resources of type appInfos
   * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations
   * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints
   * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases
   * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param fieldsReviewSubmissions the fields to include for returned resources of type reviewSubmissions
   * @param fieldsAppPrices the fields to include for returned resources of type appPrices
   * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders
   * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups
   * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions
   * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsAppCustomProductPages the fields to include for returned resources of type appCustomProductPages
   * @param fieldsAppEvents the fields to include for returned resources of type appEvents
   * @param fieldsTerritories the fields to include for returned resources of type territories
   * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limitAppClips maximum number of related appClips returned (when they are included)
   * @param limitAppCustomProductPages maximum number of related appCustomProductPages returned (when they are included)
   * @param limitAppEvents maximum number of related appEvents returned (when they are included)
   * @param limitAppInfos maximum number of related appInfos returned (when they are included)
   * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included)
   * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included)
   * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included)
   * @param limitBetaGroups maximum number of related betaGroups returned (when they are included)
   * @param limitBuilds maximum number of related builds returned (when they are included)
   * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included)
   * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included)
   * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included)
   * @param limitPrices maximum number of related prices returned (when they are included)
   * @param limitReviewSubmissions maximum number of related reviewSubmissions returned (when they are included)
   */
  public async appsGetCollection(
    filterAppStoreVersionsAppStoreState?: Array<
      | "ACCEPTED"
      | "DEVELOPER_REMOVED_FROM_SALE"
      | "DEVELOPER_REJECTED"
      | "IN_REVIEW"
      | "INVALID_BINARY"
      | "METADATA_REJECTED"
      | "PENDING_APPLE_RELEASE"
      | "PENDING_CONTRACT"
      | "PENDING_DEVELOPER_RELEASE"
      | "PREPARE_FOR_SUBMISSION"
      | "PREORDER_READY_FOR_SALE"
      | "PROCESSING_FOR_APP_STORE"
      | "READY_FOR_REVIEW"
      | "READY_FOR_SALE"
      | "REJECTED"
      | "REMOVED_FROM_SALE"
      | "WAITING_FOR_EXPORT_COMPLIANCE"
      | "WAITING_FOR_REVIEW"
      | "REPLACED_WITH_NEW_VERSION"
    >,
    filterAppStoreVersionsPlatform?: Array<"IOS" | "MAC_OS" | "TV_OS">,
    filterBundleId?: Array<string>,
    filterName?: Array<string>,
    filterSku?: Array<string>,
    filterAppStoreVersions?: Array<string>,
    filterId?: Array<string>,
    existsGameCenterEnabledVersions?: Array<string>,
    sort?: Array<"bundleId" | "-bundleId" | "name" | "-name" | "sku" | "-sku">,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    limit?: number,
    include?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "builds"
      | "ciProduct"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "preOrder"
      | "preReleaseVersions"
      | "prices"
      | "reviewSubmissions"
    >,
    fieldsBetaLicenseAgreements?: Array<"agreementText" | "app">,
    fieldsBetaAppReviewDetails?: Array<
      | "app"
      | "contactEmail"
      | "contactFirstName"
      | "contactLastName"
      | "contactPhone"
      | "demoAccountName"
      | "demoAccountPassword"
      | "demoAccountRequired"
      | "notes"
    >,
    fieldsAppClips?: Array<
      | "app"
      | "appClipAdvancedExperiences"
      | "appClipDefaultExperiences"
      | "bundleId"
    >,
    fieldsAppInfos?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appInfoLocalizations"
      | "appStoreAgeRating"
      | "appStoreState"
      | "brazilAgeRating"
      | "kidsAgeBand"
      | "primaryCategory"
      | "primarySubcategoryOne"
      | "primarySubcategoryTwo"
      | "secondaryCategory"
      | "secondarySubcategoryOne"
      | "secondarySubcategoryTwo"
    >,
    fieldsBetaAppLocalizations?: Array<
      | "app"
      | "description"
      | "feedbackEmail"
      | "locale"
      | "marketingUrl"
      | "privacyPolicyUrl"
      | "tvOsPrivacyPolicy"
    >,
    fieldsAppPricePoints?: Array<
      "app" | "customerPrice" | "priceTier" | "proceeds" | "territory"
    >,
    fieldsInAppPurchases?: Array<
      "apps" | "inAppPurchaseType" | "productId" | "referenceName" | "state"
    >,
    fieldsPreReleaseVersions?: Array<"app" | "builds" | "platform" | "version">,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    fieldsReviewSubmissions?: Array<
      | "app"
      | "appStoreVersionForReview"
      | "canceled"
      | "items"
      | "platform"
      | "state"
      | "submitted"
      | "submittedDate"
    >,
    fieldsAppPrices?: Array<"app" | "priceTier">,
    fieldsAppPreOrders?: Array<
      "app" | "appReleaseDate" | "preOrderAvailableDate"
    >,
    fieldsBetaGroups?: Array<
      | "app"
      | "betaTesters"
      | "builds"
      | "createdDate"
      | "feedbackEnabled"
      | "hasAccessToAllBuilds"
      | "iosBuildsAvailableForAppleSiliconMac"
      | "isInternalGroup"
      | "name"
      | "publicLink"
      | "publicLinkEnabled"
      | "publicLinkId"
      | "publicLinkLimit"
      | "publicLinkLimitEnabled"
    >,
    fieldsGameCenterEnabledVersions?: Array<
      "app" | "compatibleVersions" | "iconAsset" | "platform" | "versionString"
    >,
    fieldsEndUserLicenseAgreements?: Array<
      "agreementText" | "app" | "territories"
    >,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsAppCustomProductPages?: Array<
      | "app"
      | "appCustomProductPageVersions"
      | "appStoreVersionTemplate"
      | "customProductPageTemplate"
      | "name"
      | "url"
      | "visible"
    >,
    fieldsAppEvents?: Array<
      | "app"
      | "archivedTerritorySchedules"
      | "badge"
      | "deepLink"
      | "eventState"
      | "localizations"
      | "primaryLocale"
      | "priority"
      | "purchaseRequirement"
      | "purpose"
      | "referenceName"
      | "territorySchedules"
    >,
    fieldsTerritories?: Array<"currency">,
    fieldsPerfPowerMetrics?: Array<"deviceType" | "metricType" | "platform">,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limitAppClips?: number,
    limitAppCustomProductPages?: number,
    limitAppEvents?: number,
    limitAppInfos?: number,
    limitAppStoreVersions?: number,
    limitAvailableTerritories?: number,
    limitBetaAppLocalizations?: number,
    limitBetaGroups?: number,
    limitBuilds?: number,
    limitGameCenterEnabledVersions?: number,
    limitInAppPurchases?: number,
    limitPreReleaseVersions?: number,
    limitPrices?: number,
    limitReviewSubmissions?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppsResponse }> {
    const localVarPath = this.basePath + "/v1/apps";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (filterAppStoreVersionsAppStoreState !== undefined) {
      localVarQueryParameters["filter[appStoreVersions.appStoreState]"] =
        ObjectSerializer.serialize(
          filterAppStoreVersionsAppStoreState,
          "Array<'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION'>"
        );
    }

    if (filterAppStoreVersionsPlatform !== undefined) {
      localVarQueryParameters["filter[appStoreVersions.platform]"] =
        ObjectSerializer.serialize(
          filterAppStoreVersionsPlatform,
          "Array<'IOS' | 'MAC_OS' | 'TV_OS'>"
        );
    }

    if (filterBundleId !== undefined) {
      localVarQueryParameters["filter[bundleId]"] = ObjectSerializer.serialize(
        filterBundleId,
        "Array<string>"
      );
    }

    if (filterName !== undefined) {
      localVarQueryParameters["filter[name]"] = ObjectSerializer.serialize(
        filterName,
        "Array<string>"
      );
    }

    if (filterSku !== undefined) {
      localVarQueryParameters["filter[sku]"] = ObjectSerializer.serialize(
        filterSku,
        "Array<string>"
      );
    }

    if (filterAppStoreVersions !== undefined) {
      localVarQueryParameters["filter[appStoreVersions]"] =
        ObjectSerializer.serialize(filterAppStoreVersions, "Array<string>");
    }

    if (filterId !== undefined) {
      localVarQueryParameters["filter[id]"] = ObjectSerializer.serialize(
        filterId,
        "Array<string>"
      );
    }

    if (existsGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["exists[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(
          existsGameCenterEnabledVersions,
          "Array<string>"
        );
    }

    if (sort !== undefined) {
      localVarQueryParameters["sort"] = ObjectSerializer.serialize(
        sort,
        "Array<'bundleId' | '-bundleId' | 'name' | '-name' | 'sku' | '-sku'>"
      );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'builds' | 'ciProduct' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'preOrder' | 'preReleaseVersions' | 'prices' | 'reviewSubmissions'>"
      );
    }

    if (fieldsBetaLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[betaLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsBetaLicenseAgreements,
          "Array<'agreementText' | 'app'>"
        );
    }

    if (fieldsBetaAppReviewDetails !== undefined) {
      localVarQueryParameters["fields[betaAppReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppReviewDetails,
          "Array<'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes'>"
        );
    }

    if (fieldsAppClips !== undefined) {
      localVarQueryParameters["fields[appClips]"] = ObjectSerializer.serialize(
        fieldsAppClips,
        "Array<'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId'>"
      );
    }

    if (fieldsAppInfos !== undefined) {
      localVarQueryParameters["fields[appInfos]"] = ObjectSerializer.serialize(
        fieldsAppInfos,
        "Array<'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>"
      );
    }

    if (fieldsBetaAppLocalizations !== undefined) {
      localVarQueryParameters["fields[betaAppLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppLocalizations,
          "Array<'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy'>"
        );
    }

    if (fieldsAppPricePoints !== undefined) {
      localVarQueryParameters["fields[appPricePoints]"] =
        ObjectSerializer.serialize(
          fieldsAppPricePoints,
          "Array<'app' | 'customerPrice' | 'priceTier' | 'proceeds' | 'territory'>"
        );
    }

    if (fieldsInAppPurchases !== undefined) {
      localVarQueryParameters["fields[inAppPurchases]"] =
        ObjectSerializer.serialize(
          fieldsInAppPurchases,
          "Array<'apps' | 'inAppPurchaseType' | 'productId' | 'referenceName' | 'state'>"
        );
    }

    if (fieldsPreReleaseVersions !== undefined) {
      localVarQueryParameters["fields[preReleaseVersions]"] =
        ObjectSerializer.serialize(
          fieldsPreReleaseVersions,
          "Array<'app' | 'builds' | 'platform' | 'version'>"
        );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (fieldsReviewSubmissions !== undefined) {
      localVarQueryParameters["fields[reviewSubmissions]"] =
        ObjectSerializer.serialize(
          fieldsReviewSubmissions,
          "Array<'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate'>"
        );
    }

    if (fieldsAppPrices !== undefined) {
      localVarQueryParameters["fields[appPrices]"] = ObjectSerializer.serialize(
        fieldsAppPrices,
        "Array<'app' | 'priceTier'>"
      );
    }

    if (fieldsAppPreOrders !== undefined) {
      localVarQueryParameters["fields[appPreOrders]"] =
        ObjectSerializer.serialize(
          fieldsAppPreOrders,
          "Array<'app' | 'appReleaseDate' | 'preOrderAvailableDate'>"
        );
    }

    if (fieldsBetaGroups !== undefined) {
      localVarQueryParameters["fields[betaGroups]"] =
        ObjectSerializer.serialize(
          fieldsBetaGroups,
          "Array<'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled'>"
        );
    }

    if (fieldsGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["fields[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(
          fieldsGameCenterEnabledVersions,
          "Array<'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString'>"
        );
    }

    if (fieldsEndUserLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[endUserLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsEndUserLicenseAgreements,
          "Array<'agreementText' | 'app' | 'territories'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsAppCustomProductPages !== undefined) {
      localVarQueryParameters["fields[appCustomProductPages]"] =
        ObjectSerializer.serialize(
          fieldsAppCustomProductPages,
          "Array<'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible'>"
        );
    }

    if (fieldsAppEvents !== undefined) {
      localVarQueryParameters["fields[appEvents]"] = ObjectSerializer.serialize(
        fieldsAppEvents,
        "Array<'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules'>"
      );
    }

    if (fieldsTerritories !== undefined) {
      localVarQueryParameters["fields[territories]"] =
        ObjectSerializer.serialize(fieldsTerritories, "Array<'currency'>");
    }

    if (fieldsPerfPowerMetrics !== undefined) {
      localVarQueryParameters["fields[perfPowerMetrics]"] =
        ObjectSerializer.serialize(
          fieldsPerfPowerMetrics,
          "Array<'deviceType' | 'metricType' | 'platform'>"
        );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limitAppClips !== undefined) {
      localVarQueryParameters["limit[appClips]"] = ObjectSerializer.serialize(
        limitAppClips,
        "number"
      );
    }

    if (limitAppCustomProductPages !== undefined) {
      localVarQueryParameters["limit[appCustomProductPages]"] =
        ObjectSerializer.serialize(limitAppCustomProductPages, "number");
    }

    if (limitAppEvents !== undefined) {
      localVarQueryParameters["limit[appEvents]"] = ObjectSerializer.serialize(
        limitAppEvents,
        "number"
      );
    }

    if (limitAppInfos !== undefined) {
      localVarQueryParameters["limit[appInfos]"] = ObjectSerializer.serialize(
        limitAppInfos,
        "number"
      );
    }

    if (limitAppStoreVersions !== undefined) {
      localVarQueryParameters["limit[appStoreVersions]"] =
        ObjectSerializer.serialize(limitAppStoreVersions, "number");
    }

    if (limitAvailableTerritories !== undefined) {
      localVarQueryParameters["limit[availableTerritories]"] =
        ObjectSerializer.serialize(limitAvailableTerritories, "number");
    }

    if (limitBetaAppLocalizations !== undefined) {
      localVarQueryParameters["limit[betaAppLocalizations]"] =
        ObjectSerializer.serialize(limitBetaAppLocalizations, "number");
    }

    if (limitBetaGroups !== undefined) {
      localVarQueryParameters["limit[betaGroups]"] = ObjectSerializer.serialize(
        limitBetaGroups,
        "number"
      );
    }

    if (limitBuilds !== undefined) {
      localVarQueryParameters["limit[builds]"] = ObjectSerializer.serialize(
        limitBuilds,
        "number"
      );
    }

    if (limitGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["limit[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(limitGameCenterEnabledVersions, "number");
    }

    if (limitInAppPurchases !== undefined) {
      localVarQueryParameters["limit[inAppPurchases]"] =
        ObjectSerializer.serialize(limitInAppPurchases, "number");
    }

    if (limitPreReleaseVersions !== undefined) {
      localVarQueryParameters["limit[preReleaseVersions]"] =
        ObjectSerializer.serialize(limitPreReleaseVersions, "number");
    }

    if (limitPrices !== undefined) {
      localVarQueryParameters["limit[prices]"] = ObjectSerializer.serialize(
        limitPrices,
        "number"
      );
    }

    if (limitReviewSubmissions !== undefined) {
      localVarQueryParameters["limit[reviewSubmissions]"] =
        ObjectSerializer.serialize(limitReviewSubmissions, "number");
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "AppsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param include comma-separated list of relationships to include
   * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements
   * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails
   * @param fieldsAppClips the fields to include for returned resources of type appClips
   * @param fieldsAppInfos the fields to include for returned resources of type appInfos
   * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations
   * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints
   * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases
   * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param fieldsReviewSubmissions the fields to include for returned resources of type reviewSubmissions
   * @param fieldsAppPrices the fields to include for returned resources of type appPrices
   * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders
   * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups
   * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions
   * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsAppCustomProductPages the fields to include for returned resources of type appCustomProductPages
   * @param fieldsAppEvents the fields to include for returned resources of type appEvents
   * @param fieldsTerritories the fields to include for returned resources of type territories
   * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limitAppClips maximum number of related appClips returned (when they are included)
   * @param limitAppCustomProductPages maximum number of related appCustomProductPages returned (when they are included)
   * @param limitAppEvents maximum number of related appEvents returned (when they are included)
   * @param limitAppInfos maximum number of related appInfos returned (when they are included)
   * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included)
   * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included)
   * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included)
   * @param limitBetaGroups maximum number of related betaGroups returned (when they are included)
   * @param limitBuilds maximum number of related builds returned (when they are included)
   * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included)
   * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included)
   * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included)
   * @param limitPrices maximum number of related prices returned (when they are included)
   * @param limitReviewSubmissions maximum number of related reviewSubmissions returned (when they are included)
   */
  public async appsGetInstance(
    id: string,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    include?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "builds"
      | "ciProduct"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "preOrder"
      | "preReleaseVersions"
      | "prices"
      | "reviewSubmissions"
    >,
    fieldsBetaLicenseAgreements?: Array<"agreementText" | "app">,
    fieldsBetaAppReviewDetails?: Array<
      | "app"
      | "contactEmail"
      | "contactFirstName"
      | "contactLastName"
      | "contactPhone"
      | "demoAccountName"
      | "demoAccountPassword"
      | "demoAccountRequired"
      | "notes"
    >,
    fieldsAppClips?: Array<
      | "app"
      | "appClipAdvancedExperiences"
      | "appClipDefaultExperiences"
      | "bundleId"
    >,
    fieldsAppInfos?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appInfoLocalizations"
      | "appStoreAgeRating"
      | "appStoreState"
      | "brazilAgeRating"
      | "kidsAgeBand"
      | "primaryCategory"
      | "primarySubcategoryOne"
      | "primarySubcategoryTwo"
      | "secondaryCategory"
      | "secondarySubcategoryOne"
      | "secondarySubcategoryTwo"
    >,
    fieldsBetaAppLocalizations?: Array<
      | "app"
      | "description"
      | "feedbackEmail"
      | "locale"
      | "marketingUrl"
      | "privacyPolicyUrl"
      | "tvOsPrivacyPolicy"
    >,
    fieldsAppPricePoints?: Array<
      "app" | "customerPrice" | "priceTier" | "proceeds" | "territory"
    >,
    fieldsInAppPurchases?: Array<
      "apps" | "inAppPurchaseType" | "productId" | "referenceName" | "state"
    >,
    fieldsPreReleaseVersions?: Array<"app" | "builds" | "platform" | "version">,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    fieldsReviewSubmissions?: Array<
      | "app"
      | "appStoreVersionForReview"
      | "canceled"
      | "items"
      | "platform"
      | "state"
      | "submitted"
      | "submittedDate"
    >,
    fieldsAppPrices?: Array<"app" | "priceTier">,
    fieldsAppPreOrders?: Array<
      "app" | "appReleaseDate" | "preOrderAvailableDate"
    >,
    fieldsBetaGroups?: Array<
      | "app"
      | "betaTesters"
      | "builds"
      | "createdDate"
      | "feedbackEnabled"
      | "hasAccessToAllBuilds"
      | "iosBuildsAvailableForAppleSiliconMac"
      | "isInternalGroup"
      | "name"
      | "publicLink"
      | "publicLinkEnabled"
      | "publicLinkId"
      | "publicLinkLimit"
      | "publicLinkLimitEnabled"
    >,
    fieldsGameCenterEnabledVersions?: Array<
      "app" | "compatibleVersions" | "iconAsset" | "platform" | "versionString"
    >,
    fieldsEndUserLicenseAgreements?: Array<
      "agreementText" | "app" | "territories"
    >,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsAppCustomProductPages?: Array<
      | "app"
      | "appCustomProductPageVersions"
      | "appStoreVersionTemplate"
      | "customProductPageTemplate"
      | "name"
      | "url"
      | "visible"
    >,
    fieldsAppEvents?: Array<
      | "app"
      | "archivedTerritorySchedules"
      | "badge"
      | "deepLink"
      | "eventState"
      | "localizations"
      | "primaryLocale"
      | "priority"
      | "purchaseRequirement"
      | "purpose"
      | "referenceName"
      | "territorySchedules"
    >,
    fieldsTerritories?: Array<"currency">,
    fieldsPerfPowerMetrics?: Array<"deviceType" | "metricType" | "platform">,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limitAppClips?: number,
    limitAppCustomProductPages?: number,
    limitAppEvents?: number,
    limitAppInfos?: number,
    limitAppStoreVersions?: number,
    limitAvailableTerritories?: number,
    limitBetaAppLocalizations?: number,
    limitBetaGroups?: number,
    limitBuilds?: number,
    limitGameCenterEnabledVersions?: number,
    limitInAppPurchases?: number,
    limitPreReleaseVersions?: number,
    limitPrices?: number,
    limitReviewSubmissions?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsGetInstance."
      );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'builds' | 'ciProduct' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'preOrder' | 'preReleaseVersions' | 'prices' | 'reviewSubmissions'>"
      );
    }

    if (fieldsBetaLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[betaLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsBetaLicenseAgreements,
          "Array<'agreementText' | 'app'>"
        );
    }

    if (fieldsBetaAppReviewDetails !== undefined) {
      localVarQueryParameters["fields[betaAppReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppReviewDetails,
          "Array<'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes'>"
        );
    }

    if (fieldsAppClips !== undefined) {
      localVarQueryParameters["fields[appClips]"] = ObjectSerializer.serialize(
        fieldsAppClips,
        "Array<'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId'>"
      );
    }

    if (fieldsAppInfos !== undefined) {
      localVarQueryParameters["fields[appInfos]"] = ObjectSerializer.serialize(
        fieldsAppInfos,
        "Array<'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>"
      );
    }

    if (fieldsBetaAppLocalizations !== undefined) {
      localVarQueryParameters["fields[betaAppLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppLocalizations,
          "Array<'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy'>"
        );
    }

    if (fieldsAppPricePoints !== undefined) {
      localVarQueryParameters["fields[appPricePoints]"] =
        ObjectSerializer.serialize(
          fieldsAppPricePoints,
          "Array<'app' | 'customerPrice' | 'priceTier' | 'proceeds' | 'territory'>"
        );
    }

    if (fieldsInAppPurchases !== undefined) {
      localVarQueryParameters["fields[inAppPurchases]"] =
        ObjectSerializer.serialize(
          fieldsInAppPurchases,
          "Array<'apps' | 'inAppPurchaseType' | 'productId' | 'referenceName' | 'state'>"
        );
    }

    if (fieldsPreReleaseVersions !== undefined) {
      localVarQueryParameters["fields[preReleaseVersions]"] =
        ObjectSerializer.serialize(
          fieldsPreReleaseVersions,
          "Array<'app' | 'builds' | 'platform' | 'version'>"
        );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (fieldsReviewSubmissions !== undefined) {
      localVarQueryParameters["fields[reviewSubmissions]"] =
        ObjectSerializer.serialize(
          fieldsReviewSubmissions,
          "Array<'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate'>"
        );
    }

    if (fieldsAppPrices !== undefined) {
      localVarQueryParameters["fields[appPrices]"] = ObjectSerializer.serialize(
        fieldsAppPrices,
        "Array<'app' | 'priceTier'>"
      );
    }

    if (fieldsAppPreOrders !== undefined) {
      localVarQueryParameters["fields[appPreOrders]"] =
        ObjectSerializer.serialize(
          fieldsAppPreOrders,
          "Array<'app' | 'appReleaseDate' | 'preOrderAvailableDate'>"
        );
    }

    if (fieldsBetaGroups !== undefined) {
      localVarQueryParameters["fields[betaGroups]"] =
        ObjectSerializer.serialize(
          fieldsBetaGroups,
          "Array<'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled'>"
        );
    }

    if (fieldsGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["fields[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(
          fieldsGameCenterEnabledVersions,
          "Array<'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString'>"
        );
    }

    if (fieldsEndUserLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[endUserLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsEndUserLicenseAgreements,
          "Array<'agreementText' | 'app' | 'territories'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsAppCustomProductPages !== undefined) {
      localVarQueryParameters["fields[appCustomProductPages]"] =
        ObjectSerializer.serialize(
          fieldsAppCustomProductPages,
          "Array<'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible'>"
        );
    }

    if (fieldsAppEvents !== undefined) {
      localVarQueryParameters["fields[appEvents]"] = ObjectSerializer.serialize(
        fieldsAppEvents,
        "Array<'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules'>"
      );
    }

    if (fieldsTerritories !== undefined) {
      localVarQueryParameters["fields[territories]"] =
        ObjectSerializer.serialize(fieldsTerritories, "Array<'currency'>");
    }

    if (fieldsPerfPowerMetrics !== undefined) {
      localVarQueryParameters["fields[perfPowerMetrics]"] =
        ObjectSerializer.serialize(
          fieldsPerfPowerMetrics,
          "Array<'deviceType' | 'metricType' | 'platform'>"
        );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limitAppClips !== undefined) {
      localVarQueryParameters["limit[appClips]"] = ObjectSerializer.serialize(
        limitAppClips,
        "number"
      );
    }

    if (limitAppCustomProductPages !== undefined) {
      localVarQueryParameters["limit[appCustomProductPages]"] =
        ObjectSerializer.serialize(limitAppCustomProductPages, "number");
    }

    if (limitAppEvents !== undefined) {
      localVarQueryParameters["limit[appEvents]"] = ObjectSerializer.serialize(
        limitAppEvents,
        "number"
      );
    }

    if (limitAppInfos !== undefined) {
      localVarQueryParameters["limit[appInfos]"] = ObjectSerializer.serialize(
        limitAppInfos,
        "number"
      );
    }

    if (limitAppStoreVersions !== undefined) {
      localVarQueryParameters["limit[appStoreVersions]"] =
        ObjectSerializer.serialize(limitAppStoreVersions, "number");
    }

    if (limitAvailableTerritories !== undefined) {
      localVarQueryParameters["limit[availableTerritories]"] =
        ObjectSerializer.serialize(limitAvailableTerritories, "number");
    }

    if (limitBetaAppLocalizations !== undefined) {
      localVarQueryParameters["limit[betaAppLocalizations]"] =
        ObjectSerializer.serialize(limitBetaAppLocalizations, "number");
    }

    if (limitBetaGroups !== undefined) {
      localVarQueryParameters["limit[betaGroups]"] = ObjectSerializer.serialize(
        limitBetaGroups,
        "number"
      );
    }

    if (limitBuilds !== undefined) {
      localVarQueryParameters["limit[builds]"] = ObjectSerializer.serialize(
        limitBuilds,
        "number"
      );
    }

    if (limitGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["limit[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(limitGameCenterEnabledVersions, "number");
    }

    if (limitInAppPurchases !== undefined) {
      localVarQueryParameters["limit[inAppPurchases]"] =
        ObjectSerializer.serialize(limitInAppPurchases, "number");
    }

    if (limitPreReleaseVersions !== undefined) {
      localVarQueryParameters["limit[preReleaseVersions]"] =
        ObjectSerializer.serialize(limitPreReleaseVersions, "number");
    }

    if (limitPrices !== undefined) {
      localVarQueryParameters["limit[prices]"] = ObjectSerializer.serialize(
        limitPrices,
        "number"
      );
    }

    if (limitReviewSubmissions !== undefined) {
      localVarQueryParameters["limit[reviewSubmissions]"] =
        ObjectSerializer.serialize(limitReviewSubmissions, "number");
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: AppResponse }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "AppResponse");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterInAppPurchaseType filter by attribute \&#39;inAppPurchaseType\&#39;
   * @param filterCanBeSubmitted filter by canBeSubmitted
   * @param sort comma-separated list of sort expressions; resources will be sorted as specified
   * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param limit maximum resources per page
   * @param limitApps maximum number of related apps returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsInAppPurchasesGetToManyRelated(
    id: string,
    filterInAppPurchaseType?: Array<
      | "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
      | "NON_CONSUMABLE"
      | "CONSUMABLE"
      | "NON_RENEWING_SUBSCRIPTION"
      | "FREE_SUBSCRIPTION"
    >,
    filterCanBeSubmitted?: Array<string>,
    sort?: Array<
      | "inAppPurchaseType"
      | "-inAppPurchaseType"
      | "productId"
      | "-productId"
      | "referenceName"
      | "-referenceName"
    >,
    fieldsInAppPurchases?: Array<
      "apps" | "inAppPurchaseType" | "productId" | "referenceName" | "state"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    limit?: number,
    limitApps?: number,
    include?: Array<"apps">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: InAppPurchasesResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/inAppPurchases".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsInAppPurchasesGetToManyRelated."
      );
    }

    if (filterInAppPurchaseType !== undefined) {
      localVarQueryParameters["filter[inAppPurchaseType]"] =
        ObjectSerializer.serialize(
          filterInAppPurchaseType,
          "Array<'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION' | 'NON_CONSUMABLE' | 'CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION' | 'FREE_SUBSCRIPTION'>"
        );
    }

    if (filterCanBeSubmitted !== undefined) {
      localVarQueryParameters["filter[canBeSubmitted]"] =
        ObjectSerializer.serialize(filterCanBeSubmitted, "Array<string>");
    }

    if (sort !== undefined) {
      localVarQueryParameters["sort"] = ObjectSerializer.serialize(
        sort,
        "Array<'inAppPurchaseType' | '-inAppPurchaseType' | 'productId' | '-productId' | 'referenceName' | '-referenceName'>"
      );
    }

    if (fieldsInAppPurchases !== undefined) {
      localVarQueryParameters["fields[inAppPurchases]"] =
        ObjectSerializer.serialize(
          fieldsInAppPurchases,
          "Array<'apps' | 'inAppPurchaseType' | 'productId' | 'referenceName' | 'state'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitApps !== undefined) {
      localVarQueryParameters["limit[apps]"] = ObjectSerializer.serialize(
        limitApps,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'apps'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: InAppPurchasesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "InAppPurchasesResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterDeviceType filter by attribute \&#39;deviceType\&#39;
   * @param filterMetricType filter by attribute \&#39;metricType\&#39;
   * @param filterPlatform filter by attribute \&#39;platform\&#39;
   */
  public async appsPerfPowerMetricsGetToManyRelated(
    id: string,
    filterDeviceType?: Array<string>,
    filterMetricType?: Array<
      | "DISK"
      | "HANG"
      | "BATTERY"
      | "LAUNCH"
      | "MEMORY"
      | "ANIMATION"
      | "TERMINATION"
    >,
    filterPlatform?: Array<"IOS">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: object }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/perfPowerMetrics".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = [
      "application/json",
      "application/vnd.apple.xcode-metrics+json",
    ];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsPerfPowerMetricsGetToManyRelated."
      );
    }

    if (filterDeviceType !== undefined) {
      localVarQueryParameters["filter[deviceType]"] =
        ObjectSerializer.serialize(filterDeviceType, "Array<string>");
    }

    if (filterMetricType !== undefined) {
      localVarQueryParameters["filter[metricType]"] =
        ObjectSerializer.serialize(
          filterMetricType,
          "Array<'DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION'>"
        );
    }

    if (filterPlatform !== undefined) {
      localVarQueryParameters["filter[platform]"] = ObjectSerializer.serialize(
        filterPlatform,
        "Array<'IOS'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: object }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "object");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders
   */
  public async appsPreOrderGetToOneRelated(
    id: string,
    fieldsAppPreOrders?: Array<
      "app" | "appReleaseDate" | "preOrderAvailableDate"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppPreOrderResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/preOrder".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsPreOrderGetToOneRelated."
      );
    }

    if (fieldsAppPreOrders !== undefined) {
      localVarQueryParameters["fields[appPreOrders]"] =
        ObjectSerializer.serialize(
          fieldsAppPreOrders,
          "Array<'app' | 'appReleaseDate' | 'preOrderAvailableDate'>"
        );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppPreOrderResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "AppPreOrderResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions
   * @param limit maximum resources per page
   */
  public async appsPreReleaseVersionsGetToManyRelated(
    id: string,
    fieldsPreReleaseVersions?: Array<"app" | "builds" | "platform" | "version">,
    limit?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: PreReleaseVersionsResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/preReleaseVersions".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsPreReleaseVersionsGetToManyRelated."
      );
    }

    if (fieldsPreReleaseVersions !== undefined) {
      localVarQueryParameters["fields[preReleaseVersions]"] =
        ObjectSerializer.serialize(
          fieldsPreReleaseVersions,
          "Array<'app' | 'builds' | 'platform' | 'version'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: PreReleaseVersionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "PreReleaseVersionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterPriceTier filter by id(s) of related \&#39;priceTier\&#39;
   * @param filterTerritory filter by id(s) of related \&#39;territory\&#39;
   * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers
   * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsTerritories the fields to include for returned resources of type territories
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   */
  public async appsPricePointsGetToManyRelated(
    id: string,
    filterPriceTier?: Array<string>,
    filterTerritory?: Array<string>,
    fieldsAppPriceTiers?: Array<"pricePoints">,
    fieldsAppPricePoints?: Array<
      "app" | "customerPrice" | "priceTier" | "proceeds" | "territory"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsTerritories?: Array<"currency">,
    limit?: number,
    include?: Array<"app" | "priceTier" | "territory">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppPricePointsV2Response;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/pricePoints".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsPricePointsGetToManyRelated."
      );
    }

    if (filterPriceTier !== undefined) {
      localVarQueryParameters["filter[priceTier]"] = ObjectSerializer.serialize(
        filterPriceTier,
        "Array<string>"
      );
    }

    if (filterTerritory !== undefined) {
      localVarQueryParameters["filter[territory]"] = ObjectSerializer.serialize(
        filterTerritory,
        "Array<string>"
      );
    }

    if (fieldsAppPriceTiers !== undefined) {
      localVarQueryParameters["fields[appPriceTiers]"] =
        ObjectSerializer.serialize(fieldsAppPriceTiers, "Array<'pricePoints'>");
    }

    if (fieldsAppPricePoints !== undefined) {
      localVarQueryParameters["fields[appPricePoints]"] =
        ObjectSerializer.serialize(
          fieldsAppPricePoints,
          "Array<'app' | 'customerPrice' | 'priceTier' | 'proceeds' | 'territory'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsTerritories !== undefined) {
      localVarQueryParameters["fields[territories]"] =
        ObjectSerializer.serialize(fieldsTerritories, "Array<'currency'>");
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'priceTier' | 'territory'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppPricePointsV2Response;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppPricePointsV2Response"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsAppPrices the fields to include for returned resources of type appPrices
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   */
  public async appsPricesGetToManyRelated(
    id: string,
    fieldsAppPriceTiers?: Array<"pricePoints">,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsAppPrices?: Array<"app" | "priceTier">,
    limit?: number,
    include?: Array<"app" | "priceTier">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppPricesResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/prices".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsPricesGetToManyRelated."
      );
    }

    if (fieldsAppPriceTiers !== undefined) {
      localVarQueryParameters["fields[appPriceTiers]"] =
        ObjectSerializer.serialize(fieldsAppPriceTiers, "Array<'pricePoints'>");
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsAppPrices !== undefined) {
      localVarQueryParameters["fields[appPrices]"] = ObjectSerializer.serialize(
        fieldsAppPrices,
        "Array<'app' | 'priceTier'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'priceTier'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppPricesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "AppPricesResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterPlatform filter by attribute \&#39;platform\&#39;
   * @param filterState filter by attribute \&#39;state\&#39;
   * @param fieldsReviewSubmissionItems the fields to include for returned resources of type reviewSubmissionItems
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsReviewSubmissions the fields to include for returned resources of type reviewSubmissions
   * @param limit maximum resources per page
   * @param limitItems maximum number of related items returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appsReviewSubmissionsGetToManyRelated(
    id: string,
    filterPlatform?: Array<"IOS" | "MAC_OS" | "TV_OS">,
    filterState?: Array<
      | "READY_FOR_REVIEW"
      | "WAITING_FOR_REVIEW"
      | "IN_REVIEW"
      | "UNRESOLVED_ISSUES"
      | "CANCELING"
      | "COMPLETING"
      | "COMPLETE"
    >,
    fieldsReviewSubmissionItems?: Array<
      | "appCustomProductPageVersion"
      | "appEvent"
      | "appStoreVersion"
      | "appStoreVersionExperiment"
      | "removed"
      | "resolved"
      | "reviewSubmission"
      | "state"
    >,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsReviewSubmissions?: Array<
      | "app"
      | "appStoreVersionForReview"
      | "canceled"
      | "items"
      | "platform"
      | "state"
      | "submitted"
      | "submittedDate"
    >,
    limit?: number,
    limitItems?: number,
    include?: Array<"app" | "appStoreVersionForReview" | "items">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: ReviewSubmissionsResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}/reviewSubmissions".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsReviewSubmissionsGetToManyRelated."
      );
    }

    if (filterPlatform !== undefined) {
      localVarQueryParameters["filter[platform]"] = ObjectSerializer.serialize(
        filterPlatform,
        "Array<'IOS' | 'MAC_OS' | 'TV_OS'>"
      );
    }

    if (filterState !== undefined) {
      localVarQueryParameters["filter[state]"] = ObjectSerializer.serialize(
        filterState,
        "Array<'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE'>"
      );
    }

    if (fieldsReviewSubmissionItems !== undefined) {
      localVarQueryParameters["fields[reviewSubmissionItems]"] =
        ObjectSerializer.serialize(
          fieldsReviewSubmissionItems,
          "Array<'appCustomProductPageVersion' | 'appEvent' | 'appStoreVersion' | 'appStoreVersionExperiment' | 'removed' | 'resolved' | 'reviewSubmission' | 'state'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsReviewSubmissions !== undefined) {
      localVarQueryParameters["fields[reviewSubmissions]"] =
        ObjectSerializer.serialize(
          fieldsReviewSubmissions,
          "Array<'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitItems !== undefined) {
      localVarQueryParameters["limit[items]"] = ObjectSerializer.serialize(
        limitItems,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'appStoreVersionForReview' | 'items'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: ReviewSubmissionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "ReviewSubmissionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param appUpdateRequest App representation
   */
  public async appsUpdateInstance(
    id: string,
    appUpdateRequest: AppUpdateRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/apps/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appsUpdateInstance."
      );
    }

    // verify required parameter 'appUpdateRequest' is not null or undefined
    if (appUpdateRequest === null || appUpdateRequest === undefined) {
      throw new Error(
        "Required parameter appUpdateRequest was null or undefined when calling appsUpdateInstance."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PATCH",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(appUpdateRequest, "AppUpdateRequest"),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: AppResponse }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "AppResponse");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
