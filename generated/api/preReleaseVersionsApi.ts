/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { AppResponse } from "../model/appResponse";
import { BuildsResponse } from "../model/buildsResponse";
import { ErrorResponse } from "../model/errorResponse";
import { PreReleaseVersionsResponse } from "../model/preReleaseVersionsResponse";
import { PrereleaseVersionResponse } from "../model/prereleaseVersionResponse";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.appstoreconnect.apple.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PreReleaseVersionsApiApiKeys {}

export class PreReleaseVersionsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    "itc-bearer-token": new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: PreReleaseVersionsApiApiKeys, value: string) {
    (this.authentications as any)[PreReleaseVersionsApiApiKeys[key]].apiKey =
      value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications["itc-bearer-token"].accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @param id the id of the requested resource
   * @param fieldsApps the fields to include for returned resources of type apps
   */
  public async preReleaseVersionsAppGetToOneRelated(
    id: string,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/preReleaseVersions/{id}/app".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling preReleaseVersionsAppGetToOneRelated."
      );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: AppResponse }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "AppResponse");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limit maximum resources per page
   */
  public async preReleaseVersionsBuildsGetToManyRelated(
    id: string,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limit?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: BuildsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/preReleaseVersions/{id}/builds".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling preReleaseVersionsBuildsGetToManyRelated."
      );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: BuildsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "BuildsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param filterBuildsExpired filter by attribute \&#39;builds.expired\&#39;
   * @param filterBuildsProcessingState filter by attribute \&#39;builds.processingState\&#39;
   * @param filterBuildsVersion filter by attribute \&#39;builds.version\&#39;
   * @param filterPlatform filter by attribute \&#39;platform\&#39;
   * @param filterVersion filter by attribute \&#39;version\&#39;
   * @param filterApp filter by id(s) of related \&#39;app\&#39;
   * @param filterBuilds filter by id(s) of related \&#39;builds\&#39;
   * @param sort comma-separated list of sort expressions; resources will be sorted as specified
   * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limitBuilds maximum number of related builds returned (when they are included)
   */
  public async preReleaseVersionsGetCollection(
    filterBuildsExpired?: Array<string>,
    filterBuildsProcessingState?: Array<
      "PROCESSING" | "FAILED" | "INVALID" | "VALID"
    >,
    filterBuildsVersion?: Array<string>,
    filterPlatform?: Array<"IOS" | "MAC_OS" | "TV_OS">,
    filterVersion?: Array<string>,
    filterApp?: Array<string>,
    filterBuilds?: Array<string>,
    sort?: Array<"version" | "-version">,
    fieldsPreReleaseVersions?: Array<"app" | "builds" | "platform" | "version">,
    limit?: number,
    include?: Array<"app" | "builds">,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limitBuilds?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: PreReleaseVersionsResponse;
  }> {
    const localVarPath = this.basePath + "/v1/preReleaseVersions";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (filterBuildsExpired !== undefined) {
      localVarQueryParameters["filter[builds.expired]"] =
        ObjectSerializer.serialize(filterBuildsExpired, "Array<string>");
    }

    if (filterBuildsProcessingState !== undefined) {
      localVarQueryParameters["filter[builds.processingState]"] =
        ObjectSerializer.serialize(
          filterBuildsProcessingState,
          "Array<'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID'>"
        );
    }

    if (filterBuildsVersion !== undefined) {
      localVarQueryParameters["filter[builds.version]"] =
        ObjectSerializer.serialize(filterBuildsVersion, "Array<string>");
    }

    if (filterPlatform !== undefined) {
      localVarQueryParameters["filter[platform]"] = ObjectSerializer.serialize(
        filterPlatform,
        "Array<'IOS' | 'MAC_OS' | 'TV_OS'>"
      );
    }

    if (filterVersion !== undefined) {
      localVarQueryParameters["filter[version]"] = ObjectSerializer.serialize(
        filterVersion,
        "Array<string>"
      );
    }

    if (filterApp !== undefined) {
      localVarQueryParameters["filter[app]"] = ObjectSerializer.serialize(
        filterApp,
        "Array<string>"
      );
    }

    if (filterBuilds !== undefined) {
      localVarQueryParameters["filter[builds]"] = ObjectSerializer.serialize(
        filterBuilds,
        "Array<string>"
      );
    }

    if (sort !== undefined) {
      localVarQueryParameters["sort"] = ObjectSerializer.serialize(
        sort,
        "Array<'version' | '-version'>"
      );
    }

    if (fieldsPreReleaseVersions !== undefined) {
      localVarQueryParameters["fields[preReleaseVersions]"] =
        ObjectSerializer.serialize(
          fieldsPreReleaseVersions,
          "Array<'app' | 'builds' | 'platform' | 'version'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'builds'>"
      );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limitBuilds !== undefined) {
      localVarQueryParameters["limit[builds]"] = ObjectSerializer.serialize(
        limitBuilds,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: PreReleaseVersionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "PreReleaseVersionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions
   * @param include comma-separated list of relationships to include
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limitBuilds maximum number of related builds returned (when they are included)
   */
  public async preReleaseVersionsGetInstance(
    id: string,
    fieldsPreReleaseVersions?: Array<"app" | "builds" | "platform" | "version">,
    include?: Array<"app" | "builds">,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limitBuilds?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: PrereleaseVersionResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/preReleaseVersions/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling preReleaseVersionsGetInstance."
      );
    }

    if (fieldsPreReleaseVersions !== undefined) {
      localVarQueryParameters["fields[preReleaseVersions]"] =
        ObjectSerializer.serialize(
          fieldsPreReleaseVersions,
          "Array<'app' | 'builds' | 'platform' | 'version'>"
        );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'builds'>"
      );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limitBuilds !== undefined) {
      localVarQueryParameters["limit[builds]"] = ObjectSerializer.serialize(
        limitBuilds,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: PrereleaseVersionResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "PrereleaseVersionResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
