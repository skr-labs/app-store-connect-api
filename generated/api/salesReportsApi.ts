/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { ErrorResponse } from "../model/errorResponse";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.appstoreconnect.apple.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SalesReportsApiApiKeys {}

export class SalesReportsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    "itc-bearer-token": new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: SalesReportsApiApiKeys, value: string) {
    (this.authentications as any)[SalesReportsApiApiKeys[key]].apiKey = value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications["itc-bearer-token"].accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @param filterFrequency filter by attribute \&#39;frequency\&#39;
   * @param filterReportSubType filter by attribute \&#39;reportSubType\&#39;
   * @param filterReportType filter by attribute \&#39;reportType\&#39;
   * @param filterVendorNumber filter by attribute \&#39;vendorNumber\&#39;
   * @param filterReportDate filter by attribute \&#39;reportDate\&#39;
   * @param filterVersion filter by attribute \&#39;version\&#39;
   */
  public async salesReportsGetCollection(
    filterFrequency: Array<"DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY">,
    filterReportSubType: Array<"SUMMARY" | "DETAILED">,
    filterReportType: Array<
      | "SALES"
      | "PRE_ORDER"
      | "NEWSSTAND"
      | "SUBSCRIPTION"
      | "SUBSCRIPTION_EVENT"
      | "SUBSCRIBER"
      | "SUBSCRIPTION_OFFER_CODE_REDEMPTION"
    >,
    filterVendorNumber: Array<string>,
    filterReportDate?: Array<string>,
    filterVersion?: Array<string>,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Buffer }> {
    const localVarPath = this.basePath + "/v1/salesReports";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json", "application/a-gzip"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'filterFrequency' is not null or undefined
    if (filterFrequency === null || filterFrequency === undefined) {
      throw new Error(
        "Required parameter filterFrequency was null or undefined when calling salesReportsGetCollection."
      );
    }

    // verify required parameter 'filterReportSubType' is not null or undefined
    if (filterReportSubType === null || filterReportSubType === undefined) {
      throw new Error(
        "Required parameter filterReportSubType was null or undefined when calling salesReportsGetCollection."
      );
    }

    // verify required parameter 'filterReportType' is not null or undefined
    if (filterReportType === null || filterReportType === undefined) {
      throw new Error(
        "Required parameter filterReportType was null or undefined when calling salesReportsGetCollection."
      );
    }

    // verify required parameter 'filterVendorNumber' is not null or undefined
    if (filterVendorNumber === null || filterVendorNumber === undefined) {
      throw new Error(
        "Required parameter filterVendorNumber was null or undefined when calling salesReportsGetCollection."
      );
    }

    if (filterFrequency !== undefined) {
      localVarQueryParameters["filter[frequency]"] = ObjectSerializer.serialize(
        filterFrequency,
        "Array<'DAILY' | 'WEEKLY' | 'MONTHLY' | 'YEARLY'>"
      );
    }

    if (filterReportDate !== undefined) {
      localVarQueryParameters["filter[reportDate]"] =
        ObjectSerializer.serialize(filterReportDate, "Array<string>");
    }

    if (filterReportSubType !== undefined) {
      localVarQueryParameters["filter[reportSubType]"] =
        ObjectSerializer.serialize(
          filterReportSubType,
          "Array<'SUMMARY' | 'DETAILED'>"
        );
    }

    if (filterReportType !== undefined) {
      localVarQueryParameters["filter[reportType]"] =
        ObjectSerializer.serialize(
          filterReportType,
          "Array<'SALES' | 'PRE_ORDER' | 'NEWSSTAND' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SUBSCRIBER' | 'SUBSCRIPTION_OFFER_CODE_REDEMPTION'>"
        );
    }

    if (filterVendorNumber !== undefined) {
      localVarQueryParameters["filter[vendorNumber]"] =
        ObjectSerializer.serialize(filterVendorNumber, "Array<string>");
    }

    if (filterVersion !== undefined) {
      localVarQueryParameters["filter[version]"] = ObjectSerializer.serialize(
        filterVersion,
        "Array<string>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      encoding: null,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Buffer }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "Buffer");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
