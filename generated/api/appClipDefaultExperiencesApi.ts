/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { AppClipAppStoreReviewDetailResponse } from "../model/appClipAppStoreReviewDetailResponse";
import { AppClipDefaultExperienceCreateRequest } from "../model/appClipDefaultExperienceCreateRequest";
import { AppClipDefaultExperienceLocalizationsResponse } from "../model/appClipDefaultExperienceLocalizationsResponse";
import { AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest } from "../model/appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest";
import { AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse } from "../model/appClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse";
import { AppClipDefaultExperienceResponse } from "../model/appClipDefaultExperienceResponse";
import { AppClipDefaultExperienceUpdateRequest } from "../model/appClipDefaultExperienceUpdateRequest";
import { AppStoreVersionResponse } from "../model/appStoreVersionResponse";
import { ErrorResponse } from "../model/errorResponse";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.appstoreconnect.apple.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AppClipDefaultExperiencesApiApiKeys {}

export class AppClipDefaultExperiencesApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    "itc-bearer-token": new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: AppClipDefaultExperiencesApiApiKeys, value: string) {
    (this.authentications as any)[
      AppClipDefaultExperiencesApiApiKeys[key]
    ].apiKey = value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications["itc-bearer-token"].accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @param id the id of the requested resource
   * @param fieldsAppClipAppStoreReviewDetails the fields to include for returned resources of type appClipAppStoreReviewDetails
   * @param fieldsAppClipDefaultExperiences the fields to include for returned resources of type appClipDefaultExperiences
   * @param include comma-separated list of relationships to include
   */
  public async appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(
    id: string,
    fieldsAppClipAppStoreReviewDetails?: Array<
      "appClipDefaultExperience" | "invocationUrls"
    >,
    fieldsAppClipDefaultExperiences?: Array<
      | "action"
      | "appClip"
      | "appClipAppStoreReviewDetail"
      | "appClipDefaultExperienceLocalizations"
      | "appClipDefaultExperienceTemplate"
      | "releaseWithAppStoreVersion"
    >,
    include?: Array<"appClipDefaultExperience">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppClipAppStoreReviewDetailResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated."
      );
    }

    if (fieldsAppClipAppStoreReviewDetails !== undefined) {
      localVarQueryParameters["fields[appClipAppStoreReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsAppClipAppStoreReviewDetails,
          "Array<'appClipDefaultExperience' | 'invocationUrls'>"
        );
    }

    if (fieldsAppClipDefaultExperiences !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperiences]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperiences,
          "Array<'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion'>"
        );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'appClipDefaultExperience'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppClipAppStoreReviewDetailResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppClipAppStoreReviewDetailResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterLocale filter by attribute \&#39;locale\&#39;
   * @param fieldsAppClipDefaultExperiences the fields to include for returned resources of type appClipDefaultExperiences
   * @param fieldsAppClipDefaultExperienceLocalizations the fields to include for returned resources of type appClipDefaultExperienceLocalizations
   * @param fieldsAppClipHeaderImages the fields to include for returned resources of type appClipHeaderImages
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   */
  public async appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(
    id: string,
    filterLocale?: Array<string>,
    fieldsAppClipDefaultExperiences?: Array<
      | "action"
      | "appClip"
      | "appClipAppStoreReviewDetail"
      | "appClipDefaultExperienceLocalizations"
      | "appClipDefaultExperienceTemplate"
      | "releaseWithAppStoreVersion"
    >,
    fieldsAppClipDefaultExperienceLocalizations?: Array<
      "appClipDefaultExperience" | "appClipHeaderImage" | "locale" | "subtitle"
    >,
    fieldsAppClipHeaderImages?: Array<
      | "appClipDefaultExperienceLocalization"
      | "assetDeliveryState"
      | "fileName"
      | "fileSize"
      | "imageAsset"
      | "sourceFileChecksum"
      | "uploadOperations"
      | "uploaded"
    >,
    limit?: number,
    include?: Array<"appClipDefaultExperience" | "appClipHeaderImage">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppClipDefaultExperienceLocalizationsResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated."
      );
    }

    if (filterLocale !== undefined) {
      localVarQueryParameters["filter[locale]"] = ObjectSerializer.serialize(
        filterLocale,
        "Array<string>"
      );
    }

    if (fieldsAppClipDefaultExperiences !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperiences]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperiences,
          "Array<'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion'>"
        );
    }

    if (fieldsAppClipDefaultExperienceLocalizations !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperienceLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperienceLocalizations,
          "Array<'appClipDefaultExperience' | 'appClipHeaderImage' | 'locale' | 'subtitle'>"
        );
    }

    if (fieldsAppClipHeaderImages !== undefined) {
      localVarQueryParameters["fields[appClipHeaderImages]"] =
        ObjectSerializer.serialize(
          fieldsAppClipHeaderImages,
          "Array<'appClipDefaultExperienceLocalization' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'imageAsset' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'appClipDefaultExperience' | 'appClipHeaderImage'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppClipDefaultExperienceLocalizationsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppClipDefaultExperienceLocalizationsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param appClipDefaultExperienceCreateRequest AppClipDefaultExperience representation
   */
  public async appClipDefaultExperiencesCreateInstance(
    appClipDefaultExperienceCreateRequest: AppClipDefaultExperienceCreateRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppClipDefaultExperienceResponse;
  }> {
    const localVarPath = this.basePath + "/v1/appClipDefaultExperiences";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'appClipDefaultExperienceCreateRequest' is not null or undefined
    if (
      appClipDefaultExperienceCreateRequest === null ||
      appClipDefaultExperienceCreateRequest === undefined
    ) {
      throw new Error(
        "Required parameter appClipDefaultExperienceCreateRequest was null or undefined when calling appClipDefaultExperiencesCreateInstance."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        appClipDefaultExperienceCreateRequest,
        "AppClipDefaultExperienceCreateRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppClipDefaultExperienceResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppClipDefaultExperienceResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   */
  public async appClipDefaultExperiencesDeleteInstance(
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesDeleteInstance."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsAppClipDefaultExperiences the fields to include for returned resources of type appClipDefaultExperiences
   * @param include comma-separated list of relationships to include
   * @param fieldsAppClipAppStoreReviewDetails the fields to include for returned resources of type appClipAppStoreReviewDetails
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsAppClipDefaultExperienceLocalizations the fields to include for returned resources of type appClipDefaultExperienceLocalizations
   * @param limitAppClipDefaultExperienceLocalizations maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
   */
  public async appClipDefaultExperiencesGetInstance(
    id: string,
    fieldsAppClipDefaultExperiences?: Array<
      | "action"
      | "appClip"
      | "appClipAppStoreReviewDetail"
      | "appClipDefaultExperienceLocalizations"
      | "appClipDefaultExperienceTemplate"
      | "releaseWithAppStoreVersion"
    >,
    include?: Array<
      | "appClip"
      | "appClipAppStoreReviewDetail"
      | "appClipDefaultExperienceLocalizations"
      | "releaseWithAppStoreVersion"
    >,
    fieldsAppClipAppStoreReviewDetails?: Array<
      "appClipDefaultExperience" | "invocationUrls"
    >,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsAppClipDefaultExperienceLocalizations?: Array<
      "appClipDefaultExperience" | "appClipHeaderImage" | "locale" | "subtitle"
    >,
    limitAppClipDefaultExperienceLocalizations?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppClipDefaultExperienceResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesGetInstance."
      );
    }

    if (fieldsAppClipDefaultExperiences !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperiences]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperiences,
          "Array<'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion'>"
        );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'releaseWithAppStoreVersion'>"
      );
    }

    if (fieldsAppClipAppStoreReviewDetails !== undefined) {
      localVarQueryParameters["fields[appClipAppStoreReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsAppClipAppStoreReviewDetails,
          "Array<'appClipDefaultExperience' | 'invocationUrls'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsAppClipDefaultExperienceLocalizations !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperienceLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperienceLocalizations,
          "Array<'appClipDefaultExperience' | 'appClipHeaderImage' | 'locale' | 'subtitle'>"
        );
    }

    if (limitAppClipDefaultExperienceLocalizations !== undefined) {
      localVarQueryParameters["limit[appClipDefaultExperienceLocalizations]"] =
        ObjectSerializer.serialize(
          limitAppClipDefaultExperienceLocalizations,
          "number"
        );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppClipDefaultExperienceResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppClipDefaultExperienceResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsAppStoreVersionExperiments the fields to include for returned resources of type appStoreVersionExperiments
   * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations
   * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions
   * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages
   * @param fieldsAppClipDefaultExperiences the fields to include for returned resources of type appClipDefaultExperiences
   * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations
   * @param limitAppStoreVersionLocalizations maximum number of related appStoreVersionLocalizations returned (when they are included)
   * @param limitAppStoreVersionExperiments maximum number of related appStoreVersionExperiments returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(
    id: string,
    fieldsAppStoreVersionExperiments?: Array<
      | "appStoreVersion"
      | "appStoreVersionExperimentTreatments"
      | "endDate"
      | "name"
      | "reviewRequired"
      | "startDate"
      | "started"
      | "state"
      | "trafficProportion"
    >,
    fieldsAgeRatingDeclarations?: Array<
      | "alcoholTobaccoOrDrugUseOrReferences"
      | "contests"
      | "gambling"
      | "gamblingAndContests"
      | "gamblingSimulated"
      | "horrorOrFearThemes"
      | "kidsAgeBand"
      | "matureOrSuggestiveThemes"
      | "medicalOrTreatmentInformation"
      | "profanityOrCrudeHumor"
      | "seventeenPlus"
      | "sexualContentGraphicAndNudity"
      | "sexualContentOrNudity"
      | "unrestrictedWebAccess"
      | "violenceCartoonOrFantasy"
      | "violenceRealistic"
      | "violenceRealisticProlongedGraphicOrSadistic"
    >,
    fieldsAppStoreVersionSubmissions?: Array<"appStoreVersion">,
    fieldsAppStoreReviewDetails?: Array<
      | "appStoreReviewAttachments"
      | "appStoreVersion"
      | "contactEmail"
      | "contactFirstName"
      | "contactLastName"
      | "contactPhone"
      | "demoAccountName"
      | "demoAccountPassword"
      | "demoAccountRequired"
      | "notes"
    >,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsIdfaDeclarations?: Array<
      | "appStoreVersion"
      | "attributesActionWithPreviousAd"
      | "attributesAppInstallationToPreviousAd"
      | "honorsLimitedAdTracking"
      | "servesAds"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsRoutingAppCoverages?: Array<
      | "appStoreVersion"
      | "assetDeliveryState"
      | "fileName"
      | "fileSize"
      | "sourceFileChecksum"
      | "uploadOperations"
      | "uploaded"
    >,
    fieldsAppClipDefaultExperiences?: Array<
      | "action"
      | "appClip"
      | "appClipAppStoreReviewDetail"
      | "appClipDefaultExperienceLocalizations"
      | "appClipDefaultExperienceTemplate"
      | "releaseWithAppStoreVersion"
    >,
    fieldsAppStoreVersionPhasedReleases?: Array<
      | "appStoreVersion"
      | "currentDayNumber"
      | "phasedReleaseState"
      | "startDate"
      | "totalPauseDuration"
    >,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    fieldsAppStoreVersionLocalizations?: Array<
      | "appPreviewSets"
      | "appScreenshotSets"
      | "appStoreVersion"
      | "description"
      | "keywords"
      | "locale"
      | "marketingUrl"
      | "promotionalText"
      | "supportUrl"
      | "whatsNew"
    >,
    limitAppStoreVersionLocalizations?: number,
    limitAppStoreVersionExperiments?: number,
    include?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "idfaDeclaration"
      | "routingAppCoverage"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppStoreVersionResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated."
      );
    }

    if (fieldsAppStoreVersionExperiments !== undefined) {
      localVarQueryParameters["fields[appStoreVersionExperiments]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionExperiments,
          "Array<'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'endDate' | 'name' | 'reviewRequired' | 'startDate' | 'started' | 'state' | 'trafficProportion'>"
        );
    }

    if (fieldsAgeRatingDeclarations !== undefined) {
      localVarQueryParameters["fields[ageRatingDeclarations]"] =
        ObjectSerializer.serialize(
          fieldsAgeRatingDeclarations,
          "Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gambling' | 'gamblingAndContests' | 'gamblingSimulated' | 'horrorOrFearThemes' | 'kidsAgeBand' | 'matureOrSuggestiveThemes' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'seventeenPlus' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealistic' | 'violenceRealisticProlongedGraphicOrSadistic'>"
        );
    }

    if (fieldsAppStoreVersionSubmissions !== undefined) {
      localVarQueryParameters["fields[appStoreVersionSubmissions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionSubmissions,
          "Array<'appStoreVersion'>"
        );
    }

    if (fieldsAppStoreReviewDetails !== undefined) {
      localVarQueryParameters["fields[appStoreReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreReviewDetails,
          "Array<'appStoreReviewAttachments' | 'appStoreVersion' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsIdfaDeclarations !== undefined) {
      localVarQueryParameters["fields[idfaDeclarations]"] =
        ObjectSerializer.serialize(
          fieldsIdfaDeclarations,
          "Array<'appStoreVersion' | 'attributesActionWithPreviousAd' | 'attributesAppInstallationToPreviousAd' | 'honorsLimitedAdTracking' | 'servesAds'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsRoutingAppCoverages !== undefined) {
      localVarQueryParameters["fields[routingAppCoverages]"] =
        ObjectSerializer.serialize(
          fieldsRoutingAppCoverages,
          "Array<'appStoreVersion' | 'assetDeliveryState' | 'fileName' | 'fileSize' | 'sourceFileChecksum' | 'uploadOperations' | 'uploaded'>"
        );
    }

    if (fieldsAppClipDefaultExperiences !== undefined) {
      localVarQueryParameters["fields[appClipDefaultExperiences]"] =
        ObjectSerializer.serialize(
          fieldsAppClipDefaultExperiences,
          "Array<'action' | 'appClip' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceLocalizations' | 'appClipDefaultExperienceTemplate' | 'releaseWithAppStoreVersion'>"
        );
    }

    if (fieldsAppStoreVersionPhasedReleases !== undefined) {
      localVarQueryParameters["fields[appStoreVersionPhasedReleases]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionPhasedReleases,
          "Array<'appStoreVersion' | 'currentDayNumber' | 'phasedReleaseState' | 'startDate' | 'totalPauseDuration'>"
        );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (fieldsAppStoreVersionLocalizations !== undefined) {
      localVarQueryParameters["fields[appStoreVersionLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersionLocalizations,
          "Array<'appPreviewSets' | 'appScreenshotSets' | 'appStoreVersion' | 'description' | 'keywords' | 'locale' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew'>"
        );
    }

    if (limitAppStoreVersionLocalizations !== undefined) {
      localVarQueryParameters["limit[appStoreVersionLocalizations]"] =
        ObjectSerializer.serialize(limitAppStoreVersionLocalizations, "number");
    }

    if (limitAppStoreVersionExperiments !== undefined) {
      localVarQueryParameters["limit[appStoreVersionExperiments]"] =
        ObjectSerializer.serialize(limitAppStoreVersionExperiments, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'idfaDeclaration' | 'routingAppCoverage'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppStoreVersionResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppStoreVersionResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   */
  public async appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest Related linkage
   */
  public async appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(
    id: string,
    appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship."
      );
    }

    // verify required parameter 'appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest' is not null or undefined
    if (
      appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest ===
        null ||
      appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest ===
        undefined
    ) {
      throw new Error(
        "Required parameter appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PATCH",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest,
        "AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param appClipDefaultExperienceUpdateRequest AppClipDefaultExperience representation
   */
  public async appClipDefaultExperiencesUpdateInstance(
    id: string,
    appClipDefaultExperienceUpdateRequest: AppClipDefaultExperienceUpdateRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AppClipDefaultExperienceResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/appClipDefaultExperiences/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling appClipDefaultExperiencesUpdateInstance."
      );
    }

    // verify required parameter 'appClipDefaultExperienceUpdateRequest' is not null or undefined
    if (
      appClipDefaultExperienceUpdateRequest === null ||
      appClipDefaultExperienceUpdateRequest === undefined
    ) {
      throw new Error(
        "Required parameter appClipDefaultExperienceUpdateRequest was null or undefined when calling appClipDefaultExperiencesUpdateInstance."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PATCH",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        appClipDefaultExperienceUpdateRequest,
        "AppClipDefaultExperienceUpdateRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AppClipDefaultExperienceResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "AppClipDefaultExperienceResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
