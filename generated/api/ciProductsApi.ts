/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { AppResponse } from "../model/appResponse";
import { CiBuildRunsResponse } from "../model/ciBuildRunsResponse";
import { CiProductResponse } from "../model/ciProductResponse";
import { CiProductsResponse } from "../model/ciProductsResponse";
import { CiWorkflowsResponse } from "../model/ciWorkflowsResponse";
import { ErrorResponse } from "../model/errorResponse";
import { ScmRepositoriesResponse } from "../model/scmRepositoriesResponse";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.appstoreconnect.apple.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CiProductsApiApiKeys {}

export class CiProductsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    "itc-bearer-token": new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: CiProductsApiApiKeys, value: string) {
    (this.authentications as any)[CiProductsApiApiKeys[key]].apiKey = value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications["itc-bearer-token"].accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @param id the id of the requested resource
   * @param filterId filter by id(s)
   * @param fieldsScmGitReferences the fields to include for returned resources of type scmGitReferences
   * @param fieldsScmProviders the fields to include for returned resources of type scmProviders
   * @param fieldsScmRepositories the fields to include for returned resources of type scmRepositories
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   */
  public async ciProductsAdditionalRepositoriesGetToManyRelated(
    id: string,
    filterId?: Array<string>,
    fieldsScmGitReferences?: Array<
      "canonicalName" | "isDeleted" | "kind" | "name" | "repository"
    >,
    fieldsScmProviders?: Array<"repositories" | "scmProviderType" | "url">,
    fieldsScmRepositories?: Array<
      | "defaultBranch"
      | "gitReferences"
      | "httpCloneUrl"
      | "lastAccessedDate"
      | "ownerName"
      | "pullRequests"
      | "repositoryName"
      | "scmProvider"
      | "sshCloneUrl"
    >,
    limit?: number,
    include?: Array<"defaultBranch" | "scmProvider">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: ScmRepositoriesResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/ciProducts/{id}/additionalRepositories".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciProductsAdditionalRepositoriesGetToManyRelated."
      );
    }

    if (filterId !== undefined) {
      localVarQueryParameters["filter[id]"] = ObjectSerializer.serialize(
        filterId,
        "Array<string>"
      );
    }

    if (fieldsScmGitReferences !== undefined) {
      localVarQueryParameters["fields[scmGitReferences]"] =
        ObjectSerializer.serialize(
          fieldsScmGitReferences,
          "Array<'canonicalName' | 'isDeleted' | 'kind' | 'name' | 'repository'>"
        );
    }

    if (fieldsScmProviders !== undefined) {
      localVarQueryParameters["fields[scmProviders]"] =
        ObjectSerializer.serialize(
          fieldsScmProviders,
          "Array<'repositories' | 'scmProviderType' | 'url'>"
        );
    }

    if (fieldsScmRepositories !== undefined) {
      localVarQueryParameters["fields[scmRepositories]"] =
        ObjectSerializer.serialize(
          fieldsScmRepositories,
          "Array<'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'defaultBranch' | 'scmProvider'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: ScmRepositoriesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "ScmRepositoriesResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements
   * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails
   * @param fieldsAppClips the fields to include for returned resources of type appClips
   * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations
   * @param fieldsAppInfos the fields to include for returned resources of type appInfos
   * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions
   * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param fieldsReviewSubmissions the fields to include for returned resources of type reviewSubmissions
   * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups
   * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders
   * @param fieldsAppPrices the fields to include for returned resources of type appPrices
   * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions
   * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsAppCustomProductPages the fields to include for returned resources of type appCustomProductPages
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsAppEvents the fields to include for returned resources of type appEvents
   * @param fieldsTerritories the fields to include for returned resources of type territories
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limitBetaGroups maximum number of related betaGroups returned (when they are included)
   * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included)
   * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included)
   * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included)
   * @param limitBuilds maximum number of related builds returned (when they are included)
   * @param limitAppInfos maximum number of related appInfos returned (when they are included)
   * @param limitAppClips maximum number of related appClips returned (when they are included)
   * @param limitPrices maximum number of related prices returned (when they are included)
   * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included)
   * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included)
   * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included)
   * @param limitAppCustomProductPages maximum number of related appCustomProductPages returned (when they are included)
   * @param limitAppEvents maximum number of related appEvents returned (when they are included)
   * @param limitReviewSubmissions maximum number of related reviewSubmissions returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async ciProductsAppGetToOneRelated(
    id: string,
    fieldsBetaLicenseAgreements?: Array<"agreementText" | "app">,
    fieldsBetaAppReviewDetails?: Array<
      | "app"
      | "contactEmail"
      | "contactFirstName"
      | "contactLastName"
      | "contactPhone"
      | "demoAccountName"
      | "demoAccountPassword"
      | "demoAccountRequired"
      | "notes"
    >,
    fieldsAppClips?: Array<
      | "app"
      | "appClipAdvancedExperiences"
      | "appClipDefaultExperiences"
      | "bundleId"
    >,
    fieldsBetaAppLocalizations?: Array<
      | "app"
      | "description"
      | "feedbackEmail"
      | "locale"
      | "marketingUrl"
      | "privacyPolicyUrl"
      | "tvOsPrivacyPolicy"
    >,
    fieldsAppInfos?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appInfoLocalizations"
      | "appStoreAgeRating"
      | "appStoreState"
      | "brazilAgeRating"
      | "kidsAgeBand"
      | "primaryCategory"
      | "primarySubcategoryOne"
      | "primarySubcategoryTwo"
      | "secondaryCategory"
      | "secondarySubcategoryOne"
      | "secondarySubcategoryTwo"
    >,
    fieldsPreReleaseVersions?: Array<"app" | "builds" | "platform" | "version">,
    fieldsInAppPurchases?: Array<
      "apps" | "inAppPurchaseType" | "productId" | "referenceName" | "state"
    >,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    fieldsReviewSubmissions?: Array<
      | "app"
      | "appStoreVersionForReview"
      | "canceled"
      | "items"
      | "platform"
      | "state"
      | "submitted"
      | "submittedDate"
    >,
    fieldsBetaGroups?: Array<
      | "app"
      | "betaTesters"
      | "builds"
      | "createdDate"
      | "feedbackEnabled"
      | "hasAccessToAllBuilds"
      | "iosBuildsAvailableForAppleSiliconMac"
      | "isInternalGroup"
      | "name"
      | "publicLink"
      | "publicLinkEnabled"
      | "publicLinkId"
      | "publicLinkLimit"
      | "publicLinkLimitEnabled"
    >,
    fieldsAppPreOrders?: Array<
      "app" | "appReleaseDate" | "preOrderAvailableDate"
    >,
    fieldsAppPrices?: Array<"app" | "priceTier">,
    fieldsGameCenterEnabledVersions?: Array<
      "app" | "compatibleVersions" | "iconAsset" | "platform" | "versionString"
    >,
    fieldsEndUserLicenseAgreements?: Array<
      "agreementText" | "app" | "territories"
    >,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsAppCustomProductPages?: Array<
      | "app"
      | "appCustomProductPageVersions"
      | "appStoreVersionTemplate"
      | "customProductPageTemplate"
      | "name"
      | "url"
      | "visible"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsAppEvents?: Array<
      | "app"
      | "archivedTerritorySchedules"
      | "badge"
      | "deepLink"
      | "eventState"
      | "localizations"
      | "primaryLocale"
      | "priority"
      | "purchaseRequirement"
      | "purpose"
      | "referenceName"
      | "territorySchedules"
    >,
    fieldsTerritories?: Array<"currency">,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limitBetaGroups?: number,
    limitAppStoreVersions?: number,
    limitPreReleaseVersions?: number,
    limitBetaAppLocalizations?: number,
    limitBuilds?: number,
    limitAppInfos?: number,
    limitAppClips?: number,
    limitPrices?: number,
    limitAvailableTerritories?: number,
    limitInAppPurchases?: number,
    limitGameCenterEnabledVersions?: number,
    limitAppCustomProductPages?: number,
    limitAppEvents?: number,
    limitReviewSubmissions?: number,
    include?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "builds"
      | "ciProduct"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "preOrder"
      | "preReleaseVersions"
      | "prices"
      | "reviewSubmissions"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AppResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciProducts/{id}/app".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciProductsAppGetToOneRelated."
      );
    }

    if (fieldsBetaLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[betaLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsBetaLicenseAgreements,
          "Array<'agreementText' | 'app'>"
        );
    }

    if (fieldsBetaAppReviewDetails !== undefined) {
      localVarQueryParameters["fields[betaAppReviewDetails]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppReviewDetails,
          "Array<'app' | 'contactEmail' | 'contactFirstName' | 'contactLastName' | 'contactPhone' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes'>"
        );
    }

    if (fieldsAppClips !== undefined) {
      localVarQueryParameters["fields[appClips]"] = ObjectSerializer.serialize(
        fieldsAppClips,
        "Array<'app' | 'appClipAdvancedExperiences' | 'appClipDefaultExperiences' | 'bundleId'>"
      );
    }

    if (fieldsBetaAppLocalizations !== undefined) {
      localVarQueryParameters["fields[betaAppLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppLocalizations,
          "Array<'app' | 'description' | 'feedbackEmail' | 'locale' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy'>"
        );
    }

    if (fieldsAppInfos !== undefined) {
      localVarQueryParameters["fields[appInfos]"] = ObjectSerializer.serialize(
        fieldsAppInfos,
        "Array<'ageRatingDeclaration' | 'app' | 'appInfoLocalizations' | 'appStoreAgeRating' | 'appStoreState' | 'brazilAgeRating' | 'kidsAgeBand' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>"
      );
    }

    if (fieldsPreReleaseVersions !== undefined) {
      localVarQueryParameters["fields[preReleaseVersions]"] =
        ObjectSerializer.serialize(
          fieldsPreReleaseVersions,
          "Array<'app' | 'builds' | 'platform' | 'version'>"
        );
    }

    if (fieldsInAppPurchases !== undefined) {
      localVarQueryParameters["fields[inAppPurchases]"] =
        ObjectSerializer.serialize(
          fieldsInAppPurchases,
          "Array<'apps' | 'inAppPurchaseType' | 'productId' | 'referenceName' | 'state'>"
        );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (fieldsReviewSubmissions !== undefined) {
      localVarQueryParameters["fields[reviewSubmissions]"] =
        ObjectSerializer.serialize(
          fieldsReviewSubmissions,
          "Array<'app' | 'appStoreVersionForReview' | 'canceled' | 'items' | 'platform' | 'state' | 'submitted' | 'submittedDate'>"
        );
    }

    if (fieldsBetaGroups !== undefined) {
      localVarQueryParameters["fields[betaGroups]"] =
        ObjectSerializer.serialize(
          fieldsBetaGroups,
          "Array<'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled'>"
        );
    }

    if (fieldsAppPreOrders !== undefined) {
      localVarQueryParameters["fields[appPreOrders]"] =
        ObjectSerializer.serialize(
          fieldsAppPreOrders,
          "Array<'app' | 'appReleaseDate' | 'preOrderAvailableDate'>"
        );
    }

    if (fieldsAppPrices !== undefined) {
      localVarQueryParameters["fields[appPrices]"] = ObjectSerializer.serialize(
        fieldsAppPrices,
        "Array<'app' | 'priceTier'>"
      );
    }

    if (fieldsGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["fields[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(
          fieldsGameCenterEnabledVersions,
          "Array<'app' | 'compatibleVersions' | 'iconAsset' | 'platform' | 'versionString'>"
        );
    }

    if (fieldsEndUserLicenseAgreements !== undefined) {
      localVarQueryParameters["fields[endUserLicenseAgreements]"] =
        ObjectSerializer.serialize(
          fieldsEndUserLicenseAgreements,
          "Array<'agreementText' | 'app' | 'territories'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsAppCustomProductPages !== undefined) {
      localVarQueryParameters["fields[appCustomProductPages]"] =
        ObjectSerializer.serialize(
          fieldsAppCustomProductPages,
          "Array<'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate' | 'name' | 'url' | 'visible'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsAppEvents !== undefined) {
      localVarQueryParameters["fields[appEvents]"] = ObjectSerializer.serialize(
        fieldsAppEvents,
        "Array<'app' | 'archivedTerritorySchedules' | 'badge' | 'deepLink' | 'eventState' | 'localizations' | 'primaryLocale' | 'priority' | 'purchaseRequirement' | 'purpose' | 'referenceName' | 'territorySchedules'>"
      );
    }

    if (fieldsTerritories !== undefined) {
      localVarQueryParameters["fields[territories]"] =
        ObjectSerializer.serialize(fieldsTerritories, "Array<'currency'>");
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limitBetaGroups !== undefined) {
      localVarQueryParameters["limit[betaGroups]"] = ObjectSerializer.serialize(
        limitBetaGroups,
        "number"
      );
    }

    if (limitAppStoreVersions !== undefined) {
      localVarQueryParameters["limit[appStoreVersions]"] =
        ObjectSerializer.serialize(limitAppStoreVersions, "number");
    }

    if (limitPreReleaseVersions !== undefined) {
      localVarQueryParameters["limit[preReleaseVersions]"] =
        ObjectSerializer.serialize(limitPreReleaseVersions, "number");
    }

    if (limitBetaAppLocalizations !== undefined) {
      localVarQueryParameters["limit[betaAppLocalizations]"] =
        ObjectSerializer.serialize(limitBetaAppLocalizations, "number");
    }

    if (limitBuilds !== undefined) {
      localVarQueryParameters["limit[builds]"] = ObjectSerializer.serialize(
        limitBuilds,
        "number"
      );
    }

    if (limitAppInfos !== undefined) {
      localVarQueryParameters["limit[appInfos]"] = ObjectSerializer.serialize(
        limitAppInfos,
        "number"
      );
    }

    if (limitAppClips !== undefined) {
      localVarQueryParameters["limit[appClips]"] = ObjectSerializer.serialize(
        limitAppClips,
        "number"
      );
    }

    if (limitPrices !== undefined) {
      localVarQueryParameters["limit[prices]"] = ObjectSerializer.serialize(
        limitPrices,
        "number"
      );
    }

    if (limitAvailableTerritories !== undefined) {
      localVarQueryParameters["limit[availableTerritories]"] =
        ObjectSerializer.serialize(limitAvailableTerritories, "number");
    }

    if (limitInAppPurchases !== undefined) {
      localVarQueryParameters["limit[inAppPurchases]"] =
        ObjectSerializer.serialize(limitInAppPurchases, "number");
    }

    if (limitGameCenterEnabledVersions !== undefined) {
      localVarQueryParameters["limit[gameCenterEnabledVersions]"] =
        ObjectSerializer.serialize(limitGameCenterEnabledVersions, "number");
    }

    if (limitAppCustomProductPages !== undefined) {
      localVarQueryParameters["limit[appCustomProductPages]"] =
        ObjectSerializer.serialize(limitAppCustomProductPages, "number");
    }

    if (limitAppEvents !== undefined) {
      localVarQueryParameters["limit[appEvents]"] = ObjectSerializer.serialize(
        limitAppEvents,
        "number"
      );
    }

    if (limitReviewSubmissions !== undefined) {
      localVarQueryParameters["limit[reviewSubmissions]"] =
        ObjectSerializer.serialize(limitReviewSubmissions, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'builds' | 'ciProduct' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'preOrder' | 'preReleaseVersions' | 'prices' | 'reviewSubmissions'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: AppResponse }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                body = ObjectSerializer.deserialize(body, "AppResponse");
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterBuilds filter by id(s) of related \&#39;builds\&#39;
   * @param fieldsScmGitReferences the fields to include for returned resources of type scmGitReferences
   * @param fieldsCiBuildRuns the fields to include for returned resources of type ciBuildRuns
   * @param fieldsCiWorkflows the fields to include for returned resources of type ciWorkflows
   * @param fieldsScmPullRequests the fields to include for returned resources of type scmPullRequests
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limit maximum resources per page
   * @param limitBuilds maximum number of related builds returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async ciProductsBuildRunsGetToManyRelated(
    id: string,
    filterBuilds?: Array<string>,
    fieldsScmGitReferences?: Array<
      "canonicalName" | "isDeleted" | "kind" | "name" | "repository"
    >,
    fieldsCiBuildRuns?: Array<
      | "actions"
      | "buildRun"
      | "builds"
      | "cancelReason"
      | "clean"
      | "completionStatus"
      | "createdDate"
      | "destinationBranch"
      | "destinationCommit"
      | "executionProgress"
      | "finishedDate"
      | "isPullRequestBuild"
      | "issueCounts"
      | "number"
      | "product"
      | "pullRequest"
      | "sourceBranchOrTag"
      | "sourceCommit"
      | "startReason"
      | "startedDate"
      | "workflow"
    >,
    fieldsCiWorkflows?: Array<
      | "actions"
      | "branchStartCondition"
      | "buildRuns"
      | "clean"
      | "containerFilePath"
      | "description"
      | "isEnabled"
      | "isLockedForEditing"
      | "lastModifiedDate"
      | "macOsVersion"
      | "name"
      | "product"
      | "pullRequestStartCondition"
      | "repository"
      | "scheduledStartCondition"
      | "tagStartCondition"
      | "xcodeVersion"
    >,
    fieldsScmPullRequests?: Array<
      | "destinationBranchName"
      | "destinationRepositoryName"
      | "destinationRepositoryOwner"
      | "isClosed"
      | "isCrossRepository"
      | "number"
      | "repository"
      | "sourceBranchName"
      | "sourceRepositoryName"
      | "sourceRepositoryOwner"
      | "title"
      | "webUrl"
    >,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limit?: number,
    limitBuilds?: number,
    include?: Array<
      | "builds"
      | "destinationBranch"
      | "product"
      | "pullRequest"
      | "sourceBranchOrTag"
      | "workflow"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiBuildRunsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciProducts/{id}/buildRuns".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciProductsBuildRunsGetToManyRelated."
      );
    }

    if (filterBuilds !== undefined) {
      localVarQueryParameters["filter[builds]"] = ObjectSerializer.serialize(
        filterBuilds,
        "Array<string>"
      );
    }

    if (fieldsScmGitReferences !== undefined) {
      localVarQueryParameters["fields[scmGitReferences]"] =
        ObjectSerializer.serialize(
          fieldsScmGitReferences,
          "Array<'canonicalName' | 'isDeleted' | 'kind' | 'name' | 'repository'>"
        );
    }

    if (fieldsCiBuildRuns !== undefined) {
      localVarQueryParameters["fields[ciBuildRuns]"] =
        ObjectSerializer.serialize(
          fieldsCiBuildRuns,
          "Array<'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow'>"
        );
    }

    if (fieldsCiWorkflows !== undefined) {
      localVarQueryParameters["fields[ciWorkflows]"] =
        ObjectSerializer.serialize(
          fieldsCiWorkflows,
          "Array<'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion'>"
        );
    }

    if (fieldsScmPullRequests !== undefined) {
      localVarQueryParameters["fields[scmPullRequests]"] =
        ObjectSerializer.serialize(
          fieldsScmPullRequests,
          "Array<'destinationBranchName' | 'destinationRepositoryName' | 'destinationRepositoryOwner' | 'isClosed' | 'isCrossRepository' | 'number' | 'repository' | 'sourceBranchName' | 'sourceRepositoryName' | 'sourceRepositoryOwner' | 'title' | 'webUrl'>"
        );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitBuilds !== undefined) {
      localVarQueryParameters["limit[builds]"] = ObjectSerializer.serialize(
        limitBuilds,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'builds' | 'destinationBranch' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'workflow'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiBuildRunsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CiBuildRunsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   */
  public async ciProductsDeleteInstance(
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/v1/ciProducts/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciProductsDeleteInstance."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @param filterProductType filter by attribute \&#39;productType\&#39;
   * @param filterApp filter by id(s) of related \&#39;app\&#39;
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   * @param fieldsCiBuildRuns the fields to include for returned resources of type ciBuildRuns
   * @param fieldsCiWorkflows the fields to include for returned resources of type ciWorkflows
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsScmRepositories the fields to include for returned resources of type scmRepositories
   * @param limitPrimaryRepositories maximum number of related primaryRepositories returned (when they are included)
   */
  public async ciProductsGetCollection(
    filterProductType?: Array<"APP" | "FRAMEWORK">,
    filterApp?: Array<string>,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    limit?: number,
    include?: Array<"app" | "bundleId" | "primaryRepositories">,
    fieldsCiBuildRuns?: Array<
      | "actions"
      | "buildRun"
      | "builds"
      | "cancelReason"
      | "clean"
      | "completionStatus"
      | "createdDate"
      | "destinationBranch"
      | "destinationCommit"
      | "executionProgress"
      | "finishedDate"
      | "isPullRequestBuild"
      | "issueCounts"
      | "number"
      | "product"
      | "pullRequest"
      | "sourceBranchOrTag"
      | "sourceCommit"
      | "startReason"
      | "startedDate"
      | "workflow"
    >,
    fieldsCiWorkflows?: Array<
      | "actions"
      | "branchStartCondition"
      | "buildRuns"
      | "clean"
      | "containerFilePath"
      | "description"
      | "isEnabled"
      | "isLockedForEditing"
      | "lastModifiedDate"
      | "macOsVersion"
      | "name"
      | "product"
      | "pullRequestStartCondition"
      | "repository"
      | "scheduledStartCondition"
      | "tagStartCondition"
      | "xcodeVersion"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsScmRepositories?: Array<
      | "defaultBranch"
      | "gitReferences"
      | "httpCloneUrl"
      | "lastAccessedDate"
      | "ownerName"
      | "pullRequests"
      | "repositoryName"
      | "scmProvider"
      | "sshCloneUrl"
    >,
    limitPrimaryRepositories?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiProductsResponse }> {
    const localVarPath = this.basePath + "/v1/ciProducts";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (filterProductType !== undefined) {
      localVarQueryParameters["filter[productType]"] =
        ObjectSerializer.serialize(
          filterProductType,
          "Array<'APP' | 'FRAMEWORK'>"
        );
    }

    if (filterApp !== undefined) {
      localVarQueryParameters["filter[app]"] = ObjectSerializer.serialize(
        filterApp,
        "Array<string>"
      );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'bundleId' | 'primaryRepositories'>"
      );
    }

    if (fieldsCiBuildRuns !== undefined) {
      localVarQueryParameters["fields[ciBuildRuns]"] =
        ObjectSerializer.serialize(
          fieldsCiBuildRuns,
          "Array<'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow'>"
        );
    }

    if (fieldsCiWorkflows !== undefined) {
      localVarQueryParameters["fields[ciWorkflows]"] =
        ObjectSerializer.serialize(
          fieldsCiWorkflows,
          "Array<'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsScmRepositories !== undefined) {
      localVarQueryParameters["fields[scmRepositories]"] =
        ObjectSerializer.serialize(
          fieldsScmRepositories,
          "Array<'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl'>"
        );
    }

    if (limitPrimaryRepositories !== undefined) {
      localVarQueryParameters["limit[primaryRepositories]"] =
        ObjectSerializer.serialize(limitPrimaryRepositories, "number");
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiProductsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CiProductsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param include comma-separated list of relationships to include
   * @param fieldsCiBuildRuns the fields to include for returned resources of type ciBuildRuns
   * @param fieldsCiWorkflows the fields to include for returned resources of type ciWorkflows
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsScmRepositories the fields to include for returned resources of type scmRepositories
   * @param limitPrimaryRepositories maximum number of related primaryRepositories returned (when they are included)
   */
  public async ciProductsGetInstance(
    id: string,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    include?: Array<"app" | "bundleId" | "primaryRepositories">,
    fieldsCiBuildRuns?: Array<
      | "actions"
      | "buildRun"
      | "builds"
      | "cancelReason"
      | "clean"
      | "completionStatus"
      | "createdDate"
      | "destinationBranch"
      | "destinationCommit"
      | "executionProgress"
      | "finishedDate"
      | "isPullRequestBuild"
      | "issueCounts"
      | "number"
      | "product"
      | "pullRequest"
      | "sourceBranchOrTag"
      | "sourceCommit"
      | "startReason"
      | "startedDate"
      | "workflow"
    >,
    fieldsCiWorkflows?: Array<
      | "actions"
      | "branchStartCondition"
      | "buildRuns"
      | "clean"
      | "containerFilePath"
      | "description"
      | "isEnabled"
      | "isLockedForEditing"
      | "lastModifiedDate"
      | "macOsVersion"
      | "name"
      | "product"
      | "pullRequestStartCondition"
      | "repository"
      | "scheduledStartCondition"
      | "tagStartCondition"
      | "xcodeVersion"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsScmRepositories?: Array<
      | "defaultBranch"
      | "gitReferences"
      | "httpCloneUrl"
      | "lastAccessedDate"
      | "ownerName"
      | "pullRequests"
      | "repositoryName"
      | "scmProvider"
      | "sshCloneUrl"
    >,
    limitPrimaryRepositories?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiProductResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciProducts/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciProductsGetInstance."
      );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'bundleId' | 'primaryRepositories'>"
      );
    }

    if (fieldsCiBuildRuns !== undefined) {
      localVarQueryParameters["fields[ciBuildRuns]"] =
        ObjectSerializer.serialize(
          fieldsCiBuildRuns,
          "Array<'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow'>"
        );
    }

    if (fieldsCiWorkflows !== undefined) {
      localVarQueryParameters["fields[ciWorkflows]"] =
        ObjectSerializer.serialize(
          fieldsCiWorkflows,
          "Array<'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsScmRepositories !== undefined) {
      localVarQueryParameters["fields[scmRepositories]"] =
        ObjectSerializer.serialize(
          fieldsScmRepositories,
          "Array<'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl'>"
        );
    }

    if (limitPrimaryRepositories !== undefined) {
      localVarQueryParameters["limit[primaryRepositories]"] =
        ObjectSerializer.serialize(limitPrimaryRepositories, "number");
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiProductResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CiProductResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterId filter by id(s)
   * @param fieldsScmGitReferences the fields to include for returned resources of type scmGitReferences
   * @param fieldsScmProviders the fields to include for returned resources of type scmProviders
   * @param fieldsScmRepositories the fields to include for returned resources of type scmRepositories
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   */
  public async ciProductsPrimaryRepositoriesGetToManyRelated(
    id: string,
    filterId?: Array<string>,
    fieldsScmGitReferences?: Array<
      "canonicalName" | "isDeleted" | "kind" | "name" | "repository"
    >,
    fieldsScmProviders?: Array<"repositories" | "scmProviderType" | "url">,
    fieldsScmRepositories?: Array<
      | "defaultBranch"
      | "gitReferences"
      | "httpCloneUrl"
      | "lastAccessedDate"
      | "ownerName"
      | "pullRequests"
      | "repositoryName"
      | "scmProvider"
      | "sshCloneUrl"
    >,
    limit?: number,
    include?: Array<"defaultBranch" | "scmProvider">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: ScmRepositoriesResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/ciProducts/{id}/primaryRepositories".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciProductsPrimaryRepositoriesGetToManyRelated."
      );
    }

    if (filterId !== undefined) {
      localVarQueryParameters["filter[id]"] = ObjectSerializer.serialize(
        filterId,
        "Array<string>"
      );
    }

    if (fieldsScmGitReferences !== undefined) {
      localVarQueryParameters["fields[scmGitReferences]"] =
        ObjectSerializer.serialize(
          fieldsScmGitReferences,
          "Array<'canonicalName' | 'isDeleted' | 'kind' | 'name' | 'repository'>"
        );
    }

    if (fieldsScmProviders !== undefined) {
      localVarQueryParameters["fields[scmProviders]"] =
        ObjectSerializer.serialize(
          fieldsScmProviders,
          "Array<'repositories' | 'scmProviderType' | 'url'>"
        );
    }

    if (fieldsScmRepositories !== undefined) {
      localVarQueryParameters["fields[scmRepositories]"] =
        ObjectSerializer.serialize(
          fieldsScmRepositories,
          "Array<'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'defaultBranch' | 'scmProvider'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: ScmRepositoriesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "ScmRepositoriesResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsCiXcodeVersions the fields to include for returned resources of type ciXcodeVersions
   * @param fieldsCiWorkflows the fields to include for returned resources of type ciWorkflows
   * @param fieldsCiMacOsVersions the fields to include for returned resources of type ciMacOsVersions
   * @param fieldsCiProducts the fields to include for returned resources of type ciProducts
   * @param fieldsScmRepositories the fields to include for returned resources of type scmRepositories
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   */
  public async ciProductsWorkflowsGetToManyRelated(
    id: string,
    fieldsCiXcodeVersions?: Array<
      "macOsVersions" | "name" | "testDestinations" | "version"
    >,
    fieldsCiWorkflows?: Array<
      | "actions"
      | "branchStartCondition"
      | "buildRuns"
      | "clean"
      | "containerFilePath"
      | "description"
      | "isEnabled"
      | "isLockedForEditing"
      | "lastModifiedDate"
      | "macOsVersion"
      | "name"
      | "product"
      | "pullRequestStartCondition"
      | "repository"
      | "scheduledStartCondition"
      | "tagStartCondition"
      | "xcodeVersion"
    >,
    fieldsCiMacOsVersions?: Array<"name" | "version" | "xcodeVersions">,
    fieldsCiProducts?: Array<
      | "additionalRepositories"
      | "app"
      | "buildRuns"
      | "bundleId"
      | "createdDate"
      | "name"
      | "primaryRepositories"
      | "productType"
      | "workflows"
    >,
    fieldsScmRepositories?: Array<
      | "defaultBranch"
      | "gitReferences"
      | "httpCloneUrl"
      | "lastAccessedDate"
      | "ownerName"
      | "pullRequests"
      | "repositoryName"
      | "scmProvider"
      | "sshCloneUrl"
    >,
    limit?: number,
    include?: Array<"macOsVersion" | "product" | "repository" | "xcodeVersion">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiWorkflowsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciProducts/{id}/workflows".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciProductsWorkflowsGetToManyRelated."
      );
    }

    if (fieldsCiXcodeVersions !== undefined) {
      localVarQueryParameters["fields[ciXcodeVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiXcodeVersions,
          "Array<'macOsVersions' | 'name' | 'testDestinations' | 'version'>"
        );
    }

    if (fieldsCiWorkflows !== undefined) {
      localVarQueryParameters["fields[ciWorkflows]"] =
        ObjectSerializer.serialize(
          fieldsCiWorkflows,
          "Array<'actions' | 'branchStartCondition' | 'buildRuns' | 'clean' | 'containerFilePath' | 'description' | 'isEnabled' | 'isLockedForEditing' | 'lastModifiedDate' | 'macOsVersion' | 'name' | 'product' | 'pullRequestStartCondition' | 'repository' | 'scheduledStartCondition' | 'tagStartCondition' | 'xcodeVersion'>"
        );
    }

    if (fieldsCiMacOsVersions !== undefined) {
      localVarQueryParameters["fields[ciMacOsVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiMacOsVersions,
          "Array<'name' | 'version' | 'xcodeVersions'>"
        );
    }

    if (fieldsCiProducts !== undefined) {
      localVarQueryParameters["fields[ciProducts]"] =
        ObjectSerializer.serialize(
          fieldsCiProducts,
          "Array<'additionalRepositories' | 'app' | 'buildRuns' | 'bundleId' | 'createdDate' | 'name' | 'primaryRepositories' | 'productType' | 'workflows'>"
        );
    }

    if (fieldsScmRepositories !== undefined) {
      localVarQueryParameters["fields[scmRepositories]"] =
        ObjectSerializer.serialize(
          fieldsScmRepositories,
          "Array<'defaultBranch' | 'gitReferences' | 'httpCloneUrl' | 'lastAccessedDate' | 'ownerName' | 'pullRequests' | 'repositoryName' | 'scmProvider' | 'sshCloneUrl'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'macOsVersion' | 'product' | 'repository' | 'xcodeVersion'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiWorkflowsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CiWorkflowsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
