/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { BuildsResponse } from "../model/buildsResponse";
import { CiBuildActionsResponse } from "../model/ciBuildActionsResponse";
import { CiBuildRunCreateRequest } from "../model/ciBuildRunCreateRequest";
import { CiBuildRunResponse } from "../model/ciBuildRunResponse";
import { ErrorResponse } from "../model/errorResponse";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.appstoreconnect.apple.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CiBuildRunsApiApiKeys {}

export class CiBuildRunsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    "itc-bearer-token": new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: CiBuildRunsApiApiKeys, value: string) {
    (this.authentications as any)[CiBuildRunsApiApiKeys[key]].apiKey = value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications["itc-bearer-token"].accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @param id the id of the requested resource
   * @param fieldsCiBuildRuns the fields to include for returned resources of type ciBuildRuns
   * @param fieldsCiBuildActions the fields to include for returned resources of type ciBuildActions
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   */
  public async ciBuildRunsActionsGetToManyRelated(
    id: string,
    fieldsCiBuildRuns?: Array<
      | "actions"
      | "buildRun"
      | "builds"
      | "cancelReason"
      | "clean"
      | "completionStatus"
      | "createdDate"
      | "destinationBranch"
      | "destinationCommit"
      | "executionProgress"
      | "finishedDate"
      | "isPullRequestBuild"
      | "issueCounts"
      | "number"
      | "product"
      | "pullRequest"
      | "sourceBranchOrTag"
      | "sourceCommit"
      | "startReason"
      | "startedDate"
      | "workflow"
    >,
    fieldsCiBuildActions?: Array<
      | "actionType"
      | "artifacts"
      | "buildRun"
      | "completionStatus"
      | "executionProgress"
      | "finishedDate"
      | "isRequiredToPass"
      | "issueCounts"
      | "issues"
      | "name"
      | "startedDate"
      | "testResults"
    >,
    limit?: number,
    include?: Array<"buildRun">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiBuildActionsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciBuildRuns/{id}/actions".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciBuildRunsActionsGetToManyRelated."
      );
    }

    if (fieldsCiBuildRuns !== undefined) {
      localVarQueryParameters["fields[ciBuildRuns]"] =
        ObjectSerializer.serialize(
          fieldsCiBuildRuns,
          "Array<'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow'>"
        );
    }

    if (fieldsCiBuildActions !== undefined) {
      localVarQueryParameters["fields[ciBuildActions]"] =
        ObjectSerializer.serialize(
          fieldsCiBuildActions,
          "Array<'actionType' | 'artifacts' | 'buildRun' | 'completionStatus' | 'executionProgress' | 'finishedDate' | 'isRequiredToPass' | 'issueCounts' | 'issues' | 'name' | 'startedDate' | 'testResults'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'buildRun'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiBuildActionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "CiBuildActionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param filterBetaAppReviewSubmissionBetaReviewState filter by attribute \&#39;betaAppReviewSubmission.betaReviewState\&#39;
   * @param filterBuildAudienceType filter by attribute \&#39;buildAudienceType\&#39;
   * @param filterExpired filter by attribute \&#39;expired\&#39;
   * @param filterPreReleaseVersionPlatform filter by attribute \&#39;preReleaseVersion.platform\&#39;
   * @param filterPreReleaseVersionVersion filter by attribute \&#39;preReleaseVersion.version\&#39;
   * @param filterProcessingState filter by attribute \&#39;processingState\&#39;
   * @param filterUsesNonExemptEncryption filter by attribute \&#39;usesNonExemptEncryption\&#39;
   * @param filterVersion filter by attribute \&#39;version\&#39;
   * @param filterApp filter by id(s) of related \&#39;app\&#39;
   * @param filterAppStoreVersion filter by id(s) of related \&#39;appStoreVersion\&#39;
   * @param filterBetaGroups filter by id(s) of related \&#39;betaGroups\&#39;
   * @param filterPreReleaseVersion filter by id(s) of related \&#39;preReleaseVersion\&#39;
   * @param filterId filter by id(s)
   * @param sort comma-separated list of sort expressions; resources will be sorted as specified
   * @param fieldsBuildBundles the fields to include for returned resources of type buildBundles
   * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons
   * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions
   * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails
   * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters
   * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions
   * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations
   * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions
   * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations
   * @param fieldsApps the fields to include for returned resources of type apps
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups
   * @param limit maximum resources per page
   * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included)
   * @param limitBetaGroups maximum number of related betaGroups returned (when they are included)
   * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included)
   * @param limitIcons maximum number of related icons returned (when they are included)
   * @param limitBuildBundles maximum number of related buildBundles returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async ciBuildRunsBuildsGetToManyRelated(
    id: string,
    filterBetaAppReviewSubmissionBetaReviewState?: Array<
      "WAITING_FOR_REVIEW" | "IN_REVIEW" | "REJECTED" | "APPROVED"
    >,
    filterBuildAudienceType?: Array<"INTERNAL_ONLY" | "APP_STORE_ELIGIBLE">,
    filterExpired?: Array<string>,
    filterPreReleaseVersionPlatform?: Array<"IOS" | "MAC_OS" | "TV_OS">,
    filterPreReleaseVersionVersion?: Array<string>,
    filterProcessingState?: Array<
      "PROCESSING" | "FAILED" | "INVALID" | "VALID"
    >,
    filterUsesNonExemptEncryption?: Array<string>,
    filterVersion?: Array<string>,
    filterApp?: Array<string>,
    filterAppStoreVersion?: Array<string>,
    filterBetaGroups?: Array<string>,
    filterPreReleaseVersion?: Array<string>,
    filterId?: Array<string>,
    sort?: Array<
      | "preReleaseVersion"
      | "-preReleaseVersion"
      | "uploadedDate"
      | "-uploadedDate"
      | "version"
      | "-version"
    >,
    fieldsBuildBundles?: Array<
      | "appClipDomainCacheStatus"
      | "appClipDomainDebugStatus"
      | "betaAppClipInvocations"
      | "buildBundleFileSizes"
      | "bundleId"
      | "bundleType"
      | "dSYMUrl"
      | "deviceProtocols"
      | "entitlements"
      | "fileName"
      | "hasOnDemandResources"
      | "hasPrerenderedIcon"
      | "hasSirikit"
      | "includesSymbols"
      | "isIosBuildMacAppStoreCompatible"
      | "locales"
      | "platformBuild"
      | "requiredCapabilities"
      | "sdkBuild"
      | "supportedArchitectures"
      | "usesLocationServices"
    >,
    fieldsBuildIcons?: Array<"iconAsset" | "iconType" | "name">,
    fieldsBetaAppReviewSubmissions?: Array<
      "betaReviewState" | "build" | "submittedDate"
    >,
    fieldsBuildBetaDetails?: Array<
      | "autoNotifyEnabled"
      | "build"
      | "externalBuildState"
      | "internalBuildState"
    >,
    fieldsBetaTesters?: Array<
      | "apps"
      | "betaGroups"
      | "builds"
      | "email"
      | "firstName"
      | "inviteType"
      | "lastName"
    >,
    fieldsPreReleaseVersions?: Array<"app" | "builds" | "platform" | "version">,
    fieldsBetaBuildLocalizations?: Array<"build" | "locale" | "whatsNew">,
    fieldsAppStoreVersions?: Array<
      | "ageRatingDeclaration"
      | "app"
      | "appClipDefaultExperience"
      | "appStoreReviewDetail"
      | "appStoreState"
      | "appStoreVersionExperiments"
      | "appStoreVersionLocalizations"
      | "appStoreVersionPhasedRelease"
      | "appStoreVersionSubmission"
      | "build"
      | "copyright"
      | "createdDate"
      | "downloadable"
      | "earliestReleaseDate"
      | "idfaDeclaration"
      | "platform"
      | "releaseType"
      | "routingAppCoverage"
      | "usesIdfa"
      | "versionString"
    >,
    fieldsAppEncryptionDeclarations?: Array<
      | "app"
      | "appEncryptionDeclarationState"
      | "availableOnFrenchStore"
      | "builds"
      | "codeValue"
      | "containsProprietaryCryptography"
      | "containsThirdPartyCryptography"
      | "documentName"
      | "documentType"
      | "documentUrl"
      | "exempt"
      | "platform"
      | "uploadedDate"
      | "usesEncryption"
    >,
    fieldsApps?: Array<
      | "appClips"
      | "appCustomProductPages"
      | "appEvents"
      | "appInfos"
      | "appStoreVersions"
      | "availableInNewTerritories"
      | "availableTerritories"
      | "betaAppLocalizations"
      | "betaAppReviewDetail"
      | "betaGroups"
      | "betaLicenseAgreement"
      | "betaTesters"
      | "builds"
      | "bundleId"
      | "ciProduct"
      | "contentRightsDeclaration"
      | "endUserLicenseAgreement"
      | "gameCenterEnabledVersions"
      | "inAppPurchases"
      | "isOrEverWasMadeForKids"
      | "name"
      | "perfPowerMetrics"
      | "preOrder"
      | "preReleaseVersions"
      | "pricePoints"
      | "prices"
      | "primaryLocale"
      | "reviewSubmissions"
      | "sku"
      | "subscriptionStatusUrl"
      | "subscriptionStatusUrlForSandbox"
      | "subscriptionStatusUrlVersion"
      | "subscriptionStatusUrlVersionForSandbox"
    >,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    fieldsBetaGroups?: Array<
      | "app"
      | "betaTesters"
      | "builds"
      | "createdDate"
      | "feedbackEnabled"
      | "hasAccessToAllBuilds"
      | "iosBuildsAvailableForAppleSiliconMac"
      | "isInternalGroup"
      | "name"
      | "publicLink"
      | "publicLinkEnabled"
      | "publicLinkId"
      | "publicLinkLimit"
      | "publicLinkLimitEnabled"
    >,
    limit?: number,
    limitIndividualTesters?: number,
    limitBetaGroups?: number,
    limitBetaBuildLocalizations?: number,
    limitIcons?: number,
    limitBuildBundles?: number,
    include?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildBetaDetail"
      | "buildBundles"
      | "icons"
      | "individualTesters"
      | "preReleaseVersion"
    >,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: BuildsResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciBuildRuns/{id}/builds".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciBuildRunsBuildsGetToManyRelated."
      );
    }

    if (filterBetaAppReviewSubmissionBetaReviewState !== undefined) {
      localVarQueryParameters[
        "filter[betaAppReviewSubmission.betaReviewState]"
      ] = ObjectSerializer.serialize(
        filterBetaAppReviewSubmissionBetaReviewState,
        "Array<'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED'>"
      );
    }

    if (filterBuildAudienceType !== undefined) {
      localVarQueryParameters["filter[buildAudienceType]"] =
        ObjectSerializer.serialize(
          filterBuildAudienceType,
          "Array<'INTERNAL_ONLY' | 'APP_STORE_ELIGIBLE'>"
        );
    }

    if (filterExpired !== undefined) {
      localVarQueryParameters["filter[expired]"] = ObjectSerializer.serialize(
        filterExpired,
        "Array<string>"
      );
    }

    if (filterPreReleaseVersionPlatform !== undefined) {
      localVarQueryParameters["filter[preReleaseVersion.platform]"] =
        ObjectSerializer.serialize(
          filterPreReleaseVersionPlatform,
          "Array<'IOS' | 'MAC_OS' | 'TV_OS'>"
        );
    }

    if (filterPreReleaseVersionVersion !== undefined) {
      localVarQueryParameters["filter[preReleaseVersion.version]"] =
        ObjectSerializer.serialize(
          filterPreReleaseVersionVersion,
          "Array<string>"
        );
    }

    if (filterProcessingState !== undefined) {
      localVarQueryParameters["filter[processingState]"] =
        ObjectSerializer.serialize(
          filterProcessingState,
          "Array<'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID'>"
        );
    }

    if (filterUsesNonExemptEncryption !== undefined) {
      localVarQueryParameters["filter[usesNonExemptEncryption]"] =
        ObjectSerializer.serialize(
          filterUsesNonExemptEncryption,
          "Array<string>"
        );
    }

    if (filterVersion !== undefined) {
      localVarQueryParameters["filter[version]"] = ObjectSerializer.serialize(
        filterVersion,
        "Array<string>"
      );
    }

    if (filterApp !== undefined) {
      localVarQueryParameters["filter[app]"] = ObjectSerializer.serialize(
        filterApp,
        "Array<string>"
      );
    }

    if (filterAppStoreVersion !== undefined) {
      localVarQueryParameters["filter[appStoreVersion]"] =
        ObjectSerializer.serialize(filterAppStoreVersion, "Array<string>");
    }

    if (filterBetaGroups !== undefined) {
      localVarQueryParameters["filter[betaGroups]"] =
        ObjectSerializer.serialize(filterBetaGroups, "Array<string>");
    }

    if (filterPreReleaseVersion !== undefined) {
      localVarQueryParameters["filter[preReleaseVersion]"] =
        ObjectSerializer.serialize(filterPreReleaseVersion, "Array<string>");
    }

    if (filterId !== undefined) {
      localVarQueryParameters["filter[id]"] = ObjectSerializer.serialize(
        filterId,
        "Array<string>"
      );
    }

    if (sort !== undefined) {
      localVarQueryParameters["sort"] = ObjectSerializer.serialize(
        sort,
        "Array<'preReleaseVersion' | '-preReleaseVersion' | 'uploadedDate' | '-uploadedDate' | 'version' | '-version'>"
      );
    }

    if (fieldsBuildBundles !== undefined) {
      localVarQueryParameters["fields[buildBundles]"] =
        ObjectSerializer.serialize(
          fieldsBuildBundles,
          "Array<'appClipDomainCacheStatus' | 'appClipDomainDebugStatus' | 'betaAppClipInvocations' | 'buildBundleFileSizes' | 'bundleId' | 'bundleType' | 'dSYMUrl' | 'deviceProtocols' | 'entitlements' | 'fileName' | 'hasOnDemandResources' | 'hasPrerenderedIcon' | 'hasSirikit' | 'includesSymbols' | 'isIosBuildMacAppStoreCompatible' | 'locales' | 'platformBuild' | 'requiredCapabilities' | 'sdkBuild' | 'supportedArchitectures' | 'usesLocationServices'>"
        );
    }

    if (fieldsBuildIcons !== undefined) {
      localVarQueryParameters["fields[buildIcons]"] =
        ObjectSerializer.serialize(
          fieldsBuildIcons,
          "Array<'iconAsset' | 'iconType' | 'name'>"
        );
    }

    if (fieldsBetaAppReviewSubmissions !== undefined) {
      localVarQueryParameters["fields[betaAppReviewSubmissions]"] =
        ObjectSerializer.serialize(
          fieldsBetaAppReviewSubmissions,
          "Array<'betaReviewState' | 'build' | 'submittedDate'>"
        );
    }

    if (fieldsBuildBetaDetails !== undefined) {
      localVarQueryParameters["fields[buildBetaDetails]"] =
        ObjectSerializer.serialize(
          fieldsBuildBetaDetails,
          "Array<'autoNotifyEnabled' | 'build' | 'externalBuildState' | 'internalBuildState'>"
        );
    }

    if (fieldsBetaTesters !== undefined) {
      localVarQueryParameters["fields[betaTesters]"] =
        ObjectSerializer.serialize(
          fieldsBetaTesters,
          "Array<'apps' | 'betaGroups' | 'builds' | 'email' | 'firstName' | 'inviteType' | 'lastName'>"
        );
    }

    if (fieldsPreReleaseVersions !== undefined) {
      localVarQueryParameters["fields[preReleaseVersions]"] =
        ObjectSerializer.serialize(
          fieldsPreReleaseVersions,
          "Array<'app' | 'builds' | 'platform' | 'version'>"
        );
    }

    if (fieldsBetaBuildLocalizations !== undefined) {
      localVarQueryParameters["fields[betaBuildLocalizations]"] =
        ObjectSerializer.serialize(
          fieldsBetaBuildLocalizations,
          "Array<'build' | 'locale' | 'whatsNew'>"
        );
    }

    if (fieldsAppStoreVersions !== undefined) {
      localVarQueryParameters["fields[appStoreVersions]"] =
        ObjectSerializer.serialize(
          fieldsAppStoreVersions,
          "Array<'ageRatingDeclaration' | 'app' | 'appClipDefaultExperience' | 'appStoreReviewDetail' | 'appStoreState' | 'appStoreVersionExperiments' | 'appStoreVersionLocalizations' | 'appStoreVersionPhasedRelease' | 'appStoreVersionSubmission' | 'build' | 'copyright' | 'createdDate' | 'downloadable' | 'earliestReleaseDate' | 'idfaDeclaration' | 'platform' | 'releaseType' | 'routingAppCoverage' | 'usesIdfa' | 'versionString'>"
        );
    }

    if (fieldsAppEncryptionDeclarations !== undefined) {
      localVarQueryParameters["fields[appEncryptionDeclarations]"] =
        ObjectSerializer.serialize(
          fieldsAppEncryptionDeclarations,
          "Array<'app' | 'appEncryptionDeclarationState' | 'availableOnFrenchStore' | 'builds' | 'codeValue' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'documentName' | 'documentType' | 'documentUrl' | 'exempt' | 'platform' | 'uploadedDate' | 'usesEncryption'>"
        );
    }

    if (fieldsApps !== undefined) {
      localVarQueryParameters["fields[apps]"] = ObjectSerializer.serialize(
        fieldsApps,
        "Array<'appClips' | 'appCustomProductPages' | 'appEvents' | 'appInfos' | 'appStoreVersions' | 'availableInNewTerritories' | 'availableTerritories' | 'betaAppLocalizations' | 'betaAppReviewDetail' | 'betaGroups' | 'betaLicenseAgreement' | 'betaTesters' | 'builds' | 'bundleId' | 'ciProduct' | 'contentRightsDeclaration' | 'endUserLicenseAgreement' | 'gameCenterEnabledVersions' | 'inAppPurchases' | 'isOrEverWasMadeForKids' | 'name' | 'perfPowerMetrics' | 'preOrder' | 'preReleaseVersions' | 'pricePoints' | 'prices' | 'primaryLocale' | 'reviewSubmissions' | 'sku' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlVersionForSandbox'>"
      );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (fieldsBetaGroups !== undefined) {
      localVarQueryParameters["fields[betaGroups]"] =
        ObjectSerializer.serialize(
          fieldsBetaGroups,
          "Array<'app' | 'betaTesters' | 'builds' | 'createdDate' | 'feedbackEnabled' | 'hasAccessToAllBuilds' | 'iosBuildsAvailableForAppleSiliconMac' | 'isInternalGroup' | 'name' | 'publicLink' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimit' | 'publicLinkLimitEnabled'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitIndividualTesters !== undefined) {
      localVarQueryParameters["limit[individualTesters]"] =
        ObjectSerializer.serialize(limitIndividualTesters, "number");
    }

    if (limitBetaGroups !== undefined) {
      localVarQueryParameters["limit[betaGroups]"] = ObjectSerializer.serialize(
        limitBetaGroups,
        "number"
      );
    }

    if (limitBetaBuildLocalizations !== undefined) {
      localVarQueryParameters["limit[betaBuildLocalizations]"] =
        ObjectSerializer.serialize(limitBetaBuildLocalizations, "number");
    }

    if (limitIcons !== undefined) {
      localVarQueryParameters["limit[icons]"] = ObjectSerializer.serialize(
        limitIcons,
        "number"
      );
    }

    if (limitBuildBundles !== undefined) {
      localVarQueryParameters["limit[buildBundles]"] =
        ObjectSerializer.serialize(limitBuildBundles, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildBetaDetail' | 'buildBundles' | 'icons' | 'individualTesters' | 'preReleaseVersion'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: BuildsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "BuildsResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param ciBuildRunCreateRequest CiBuildRun representation
   */
  public async ciBuildRunsCreateInstance(
    ciBuildRunCreateRequest: CiBuildRunCreateRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiBuildRunResponse }> {
    const localVarPath = this.basePath + "/v1/ciBuildRuns";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'ciBuildRunCreateRequest' is not null or undefined
    if (
      ciBuildRunCreateRequest === null ||
      ciBuildRunCreateRequest === undefined
    ) {
      throw new Error(
        "Required parameter ciBuildRunCreateRequest was null or undefined when calling ciBuildRunsCreateInstance."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        ciBuildRunCreateRequest,
        "CiBuildRunCreateRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiBuildRunResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CiBuildRunResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsCiBuildRuns the fields to include for returned resources of type ciBuildRuns
   * @param include comma-separated list of relationships to include
   * @param fieldsCiBuildActions the fields to include for returned resources of type ciBuildActions
   * @param fieldsBuilds the fields to include for returned resources of type builds
   * @param limitBuilds maximum number of related builds returned (when they are included)
   */
  public async ciBuildRunsGetInstance(
    id: string,
    fieldsCiBuildRuns?: Array<
      | "actions"
      | "buildRun"
      | "builds"
      | "cancelReason"
      | "clean"
      | "completionStatus"
      | "createdDate"
      | "destinationBranch"
      | "destinationCommit"
      | "executionProgress"
      | "finishedDate"
      | "isPullRequestBuild"
      | "issueCounts"
      | "number"
      | "product"
      | "pullRequest"
      | "sourceBranchOrTag"
      | "sourceCommit"
      | "startReason"
      | "startedDate"
      | "workflow"
    >,
    include?: Array<
      | "builds"
      | "destinationBranch"
      | "product"
      | "pullRequest"
      | "sourceBranchOrTag"
      | "workflow"
    >,
    fieldsCiBuildActions?: Array<
      | "actionType"
      | "artifacts"
      | "buildRun"
      | "completionStatus"
      | "executionProgress"
      | "finishedDate"
      | "isRequiredToPass"
      | "issueCounts"
      | "issues"
      | "name"
      | "startedDate"
      | "testResults"
    >,
    fieldsBuilds?: Array<
      | "app"
      | "appEncryptionDeclaration"
      | "appStoreVersion"
      | "betaAppReviewSubmission"
      | "betaBuildLocalizations"
      | "betaGroups"
      | "buildAudienceType"
      | "buildBetaDetail"
      | "buildBundles"
      | "computedMinMacOsVersion"
      | "diagnosticSignatures"
      | "expirationDate"
      | "expired"
      | "iconAssetToken"
      | "icons"
      | "individualTesters"
      | "lsMinimumSystemVersion"
      | "minOsVersion"
      | "perfPowerMetrics"
      | "preReleaseVersion"
      | "processingState"
      | "uploadedDate"
      | "usesNonExemptEncryption"
      | "version"
    >,
    limitBuilds?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiBuildRunResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciBuildRuns/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciBuildRunsGetInstance."
      );
    }

    if (fieldsCiBuildRuns !== undefined) {
      localVarQueryParameters["fields[ciBuildRuns]"] =
        ObjectSerializer.serialize(
          fieldsCiBuildRuns,
          "Array<'actions' | 'buildRun' | 'builds' | 'cancelReason' | 'clean' | 'completionStatus' | 'createdDate' | 'destinationBranch' | 'destinationCommit' | 'executionProgress' | 'finishedDate' | 'isPullRequestBuild' | 'issueCounts' | 'number' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'sourceCommit' | 'startReason' | 'startedDate' | 'workflow'>"
        );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'builds' | 'destinationBranch' | 'product' | 'pullRequest' | 'sourceBranchOrTag' | 'workflow'>"
      );
    }

    if (fieldsCiBuildActions !== undefined) {
      localVarQueryParameters["fields[ciBuildActions]"] =
        ObjectSerializer.serialize(
          fieldsCiBuildActions,
          "Array<'actionType' | 'artifacts' | 'buildRun' | 'completionStatus' | 'executionProgress' | 'finishedDate' | 'isRequiredToPass' | 'issueCounts' | 'issues' | 'name' | 'startedDate' | 'testResults'>"
        );
    }

    if (fieldsBuilds !== undefined) {
      localVarQueryParameters["fields[builds]"] = ObjectSerializer.serialize(
        fieldsBuilds,
        "Array<'app' | 'appEncryptionDeclaration' | 'appStoreVersion' | 'betaAppReviewSubmission' | 'betaBuildLocalizations' | 'betaGroups' | 'buildAudienceType' | 'buildBetaDetail' | 'buildBundles' | 'computedMinMacOsVersion' | 'diagnosticSignatures' | 'expirationDate' | 'expired' | 'iconAssetToken' | 'icons' | 'individualTesters' | 'lsMinimumSystemVersion' | 'minOsVersion' | 'perfPowerMetrics' | 'preReleaseVersion' | 'processingState' | 'uploadedDate' | 'usesNonExemptEncryption' | 'version'>"
      );
    }

    if (limitBuilds !== undefined) {
      localVarQueryParameters["limit[builds]"] = ObjectSerializer.serialize(
        limitBuilds,
        "number"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiBuildRunResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, "CiBuildRunResponse");
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
