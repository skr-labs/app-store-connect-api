/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { CiMacOsVersionResponse } from "../model/ciMacOsVersionResponse";
import { CiMacOsVersionsResponse } from "../model/ciMacOsVersionsResponse";
import { CiXcodeVersionsResponse } from "../model/ciXcodeVersionsResponse";
import { ErrorResponse } from "../model/errorResponse";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.appstoreconnect.apple.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CiMacOsVersionsApiApiKeys {}

export class CiMacOsVersionsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    "itc-bearer-token": new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: CiMacOsVersionsApiApiKeys, value: string) {
    (this.authentications as any)[CiMacOsVersionsApiApiKeys[key]].apiKey =
      value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications["itc-bearer-token"].accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @param fieldsCiMacOsVersions the fields to include for returned resources of type ciMacOsVersions
   * @param limit maximum resources per page
   * @param include comma-separated list of relationships to include
   * @param fieldsCiXcodeVersions the fields to include for returned resources of type ciXcodeVersions
   * @param limitXcodeVersions maximum number of related xcodeVersions returned (when they are included)
   */
  public async ciMacOsVersionsGetCollection(
    fieldsCiMacOsVersions?: Array<"name" | "version" | "xcodeVersions">,
    limit?: number,
    include?: Array<"xcodeVersions">,
    fieldsCiXcodeVersions?: Array<
      "macOsVersions" | "name" | "testDestinations" | "version"
    >,
    limitXcodeVersions?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: CiMacOsVersionsResponse;
  }> {
    const localVarPath = this.basePath + "/v1/ciMacOsVersions";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    if (fieldsCiMacOsVersions !== undefined) {
      localVarQueryParameters["fields[ciMacOsVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiMacOsVersions,
          "Array<'name' | 'version' | 'xcodeVersions'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'xcodeVersions'>"
      );
    }

    if (fieldsCiXcodeVersions !== undefined) {
      localVarQueryParameters["fields[ciXcodeVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiXcodeVersions,
          "Array<'macOsVersions' | 'name' | 'testDestinations' | 'version'>"
        );
    }

    if (limitXcodeVersions !== undefined) {
      localVarQueryParameters["limit[xcodeVersions]"] =
        ObjectSerializer.serialize(limitXcodeVersions, "number");
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiMacOsVersionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "CiMacOsVersionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsCiMacOsVersions the fields to include for returned resources of type ciMacOsVersions
   * @param include comma-separated list of relationships to include
   * @param fieldsCiXcodeVersions the fields to include for returned resources of type ciXcodeVersions
   * @param limitXcodeVersions maximum number of related xcodeVersions returned (when they are included)
   */
  public async ciMacOsVersionsGetInstance(
    id: string,
    fieldsCiMacOsVersions?: Array<"name" | "version" | "xcodeVersions">,
    include?: Array<"xcodeVersions">,
    fieldsCiXcodeVersions?: Array<
      "macOsVersions" | "name" | "testDestinations" | "version"
    >,
    limitXcodeVersions?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CiMacOsVersionResponse }> {
    const localVarPath =
      this.basePath +
      "/v1/ciMacOsVersions/{id}".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciMacOsVersionsGetInstance."
      );
    }

    if (fieldsCiMacOsVersions !== undefined) {
      localVarQueryParameters["fields[ciMacOsVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiMacOsVersions,
          "Array<'name' | 'version' | 'xcodeVersions'>"
        );
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'xcodeVersions'>"
      );
    }

    if (fieldsCiXcodeVersions !== undefined) {
      localVarQueryParameters["fields[ciXcodeVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiXcodeVersions,
          "Array<'macOsVersions' | 'name' | 'testDestinations' | 'version'>"
        );
    }

    if (limitXcodeVersions !== undefined) {
      localVarQueryParameters["limit[xcodeVersions]"] =
        ObjectSerializer.serialize(limitXcodeVersions, "number");
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiMacOsVersionResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "CiMacOsVersionResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @param id the id of the requested resource
   * @param fieldsCiXcodeVersions the fields to include for returned resources of type ciXcodeVersions
   * @param fieldsCiMacOsVersions the fields to include for returned resources of type ciMacOsVersions
   * @param limit maximum resources per page
   * @param limitMacOsVersions maximum number of related macOsVersions returned (when they are included)
   * @param include comma-separated list of relationships to include
   */
  public async ciMacOsVersionsXcodeVersionsGetToManyRelated(
    id: string,
    fieldsCiXcodeVersions?: Array<
      "macOsVersions" | "name" | "testDestinations" | "version"
    >,
    fieldsCiMacOsVersions?: Array<"name" | "version" | "xcodeVersions">,
    limit?: number,
    limitMacOsVersions?: number,
    include?: Array<"macOsVersions">,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: CiXcodeVersionsResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v1/ciMacOsVersions/{id}/xcodeVersions".replace(
        "{" + "id" + "}",
        encodeURIComponent(String(id))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling ciMacOsVersionsXcodeVersionsGetToManyRelated."
      );
    }

    if (fieldsCiXcodeVersions !== undefined) {
      localVarQueryParameters["fields[ciXcodeVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiXcodeVersions,
          "Array<'macOsVersions' | 'name' | 'testDestinations' | 'version'>"
        );
    }

    if (fieldsCiMacOsVersions !== undefined) {
      localVarQueryParameters["fields[ciMacOsVersions]"] =
        ObjectSerializer.serialize(
          fieldsCiMacOsVersions,
          "Array<'name' | 'version' | 'xcodeVersions'>"
        );
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = ObjectSerializer.serialize(
        limit,
        "number"
      );
    }

    if (limitMacOsVersions !== undefined) {
      localVarQueryParameters["limit[macOsVersions]"] =
        ObjectSerializer.serialize(limitMacOsVersions, "number");
    }

    if (include !== undefined) {
      localVarQueryParameters["include"] = ObjectSerializer.serialize(
        include,
        "Array<'macOsVersions'>"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications["itc-bearer-token"].accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications["itc-bearer-token"].applyToRequest(
          localVarRequestOptions
        )
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: CiXcodeVersionsResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                "CiXcodeVersionsResponse"
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
